[{"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/index.js":"1","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/reportWebVitals.js":"2","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/App.js":"3","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/ChatRooms.js":"4","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/RegisterPage.js":"5","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/AuctionList.js":"6","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/AuctionDetails.js":"7","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/Dashboard.js":"8","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/LoginPage.js":"9","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/Chat.js":"10","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/ChatRoomForm.js":"11","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/MyDMChats.js":"12","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/DMChat.js":"13","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/Account.js":"14","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/ChangePasswordForm.js":"15","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/AllAuctions.js":"16","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/DeleteAccount.js":"17","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/EditAccount.js":"18","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/AccountManagement.js":"19","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/MyAuctions.js":"20","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/AuctionCommentForm.js":"21","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/AuctionForm.js":"22","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/AuctionsManagement.js":"23","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/users/UserDetails.js":"24","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/users/UserCommentForm.js":"25","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/Notification.js":"26","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/NavbarLogged.js":"27","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/DialogComponent.js":"28","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/Navbar.js":"29","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/SearchBar.js":"30","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/SnackbarComponent.js":"31"},{"size":510,"mtime":1644349046637,"results":"32","hashOfConfig":"33"},{"size":452,"mtime":1644349226539,"results":"34","hashOfConfig":"33"},{"size":6216,"mtime":1644349226511,"results":"35","hashOfConfig":"33"},{"size":4474,"mtime":1644349226423,"results":"36","hashOfConfig":"33"},{"size":6977,"mtime":1644355748910,"results":"37","hashOfConfig":"33"},{"size":2837,"mtime":1644349226415,"results":"38","hashOfConfig":"33"},{"size":29118,"mtime":1644349226483,"results":"39","hashOfConfig":"33"},{"size":1097,"mtime":1644349226391,"results":"40","hashOfConfig":"33"},{"size":10494,"mtime":1644349226567,"results":"41","hashOfConfig":"33"},{"size":6597,"mtime":1644349226507,"results":"42","hashOfConfig":"33"},{"size":4587,"mtime":1644349226383,"results":"43","hashOfConfig":"33"},{"size":4409,"mtime":1644349226559,"results":"44","hashOfConfig":"33"},{"size":7214,"mtime":1644349314296,"results":"45","hashOfConfig":"33"},{"size":664,"mtime":1644349046557,"results":"46","hashOfConfig":"33"},{"size":5145,"mtime":1644355748882,"results":"47","hashOfConfig":"33"},{"size":3053,"mtime":1644349226491,"results":"48","hashOfConfig":"33"},{"size":4456,"mtime":1644355748926,"results":"49","hashOfConfig":"33"},{"size":8712,"mtime":1644355323202,"results":"50","hashOfConfig":"33"},{"size":5071,"mtime":1644349226591,"results":"51","hashOfConfig":"33"},{"size":5123,"mtime":1644349226523,"results":"52","hashOfConfig":"33"},{"size":8123,"mtime":1644355748902,"results":"53","hashOfConfig":"33"},{"size":8327,"mtime":1644355748894,"results":"54","hashOfConfig":"33"},{"size":5335,"mtime":1644349226455,"results":"55","hashOfConfig":"33"},{"size":30792,"mtime":1644349226411,"results":"56","hashOfConfig":"33"},{"size":8862,"mtime":1644354960524,"results":"57","hashOfConfig":"33"},{"size":3842,"mtime":1644349226479,"results":"58","hashOfConfig":"33"},{"size":8299,"mtime":1644349226403,"results":"59","hashOfConfig":"33"},{"size":1321,"mtime":1644426184912,"results":"60","hashOfConfig":"33"},{"size":2066,"mtime":1644355748914,"results":"61","hashOfConfig":"33"},{"size":3223,"mtime":1644349226443,"results":"62","hashOfConfig":"33"},{"size":511,"mtime":1644349226535,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hc5bjo",{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/index.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/reportWebVitals.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/App.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/ChatRooms.js",["143"],"import React, { useEffect, useState } from \"react\";\nimport * as mqtt from \"mqtt\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport NavbarLogged from \"../NavbarLogged\";\nimport { Button, Stack } from \"@mui/material\";\nimport { useConfirm } from \"material-ui-confirm\";\nimport Notification from \"../Notification\";\n\nconst ChatRooms = () => {\n    const history = useHistory();\n    const params = useParams();\n    const confirm = useConfirm();\n    const [client, setClient] = useState(null);\n    const [rooms, setRooms] = useState([]);\n    const mqttConnect = (host, mqttOption) => {\n        setClient(mqtt.connect(host, mqttOption));\n    };\n    useEffect(() => {\n        if (client) {\n            client.on(\"connect\", () => {\n                client.subscribe(\"chatRooms\");\n                client.publish(\"chatRooms\", \"getRooms\");\n            });\n            client.on(\"error\", (err) => {\n                console.error(\"Connection error: \", err);\n                client.end();\n            });\n            client.on(\"message\", (topic, message) => {\n                const payload = { topic, message: message.toString() };\n                if (\n                    payload.topic === \"chatRooms\" &&\n                    payload.message !== \"getRooms\"\n                ) {\n                    if (\n                        rooms !==\n                        payload.message.split(\"~\").filter((n) => n !== \"\")\n                    ) {\n                        setRooms(\n                            payload.message.split(\"~\").filter((n) => n !== \"\")\n                        );\n                    }\n                }\n            });\n        }\n    }, [client]);\n\n    useEffect(() => {\n        mqttConnect(\"mqtt://127.0.0.1:1884\", {\n            connectTimeout: 5000,\n            path: \"/mqtt\",\n        });\n    }, []);\n\n    const handleDelete = (roomName) => {\n        confirm({\n            title: \"Czy na pewno chcesz usnunąć ten czat?\",\n            confirmationText: \"Usuń czat\",\n            cancellationText: \"Anuluj\",\n        })\n            .then(() => {\n                client.publish(roomName, \"~DELETE\");\n            })\n            .catch(() => {});\n    };\n\n    return (\n        <div className={\"auction-list\"}>\n            <h3>Pokoje czatów</h3>\n            <NavbarLogged />\n            <div className={\"buttons\"}>\n                <Stack\n                    direction={\"row\"}\n                    spacing={\"4px\"}\n                    justifyContent={\"center\"}\n                >\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() =>\n                            history.push(`/logged/${params.id}/addChatRoom`)\n                        }\n                    >\n                        Dodaj pokój czatu\n                    </Button>\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() => history.goBack()}\n                    >\n                        Powrót\n                    </Button>\n                </Stack>\n            </div>\n\n            <div className={\"items\"}>\n                {rooms.length > 0 &&\n                    rooms.map((n) => (\n                        <div key={n} className={\"space-bet\"}>\n                            <p\n                                className={\"chatroom\"}\n                                onClick={() =>\n                                    history.push(\n                                        `/logged/${params.id}/chats/${\n                                            n.split(\":\")[0]\n                                        }`\n                                    )\n                                }\n                            >\n                                {n.split(\":\")[0]}\n                            </p>\n                            {(n.split(\":\")[1] === params.id ||\n                                params.id === \"000000000000000000000000\") && (\n                                <Button\n                                    variant={\"contained\"}\n                                    onClick={() =>\n                                        handleDelete(n.split(\":\")[0])\n                                    }\n                                >\n                                    Usuń czat\n                                </Button>\n                            )}\n                        </div>\n                    ))}\n            </div>\n            <Notification />\n        </div>\n    );\n};\n\nexport default ChatRooms;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/RegisterPage.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/AuctionList.js",["144"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport SearchBar from \"./SearchBar\";\nimport Navbar from \"./Navbar\";\nimport { Button, Stack } from \"@mui/material\";\nimport SnackbarComponent from \"./SnackbarComponent\";\n\nconst AuctionList = () => {\n    const [auctions, setAuctions] = useState([]);\n    const history = useHistory();\n\n    const [alertMessage, setAlertMessage] = useState(\"\");\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const getAllAuctions = () => {\n        axios.get(\"https://localhost:5000/auctions\").then((res) => {\n            if (res.status === 200) {\n                setAuctions(res.data);\n            } else {\n                setAlertMessage(\"Błąd ładowania danych\");\n                handleClick();\n            }\n        });\n    };\n\n    useEffect(() => {\n        getAllAuctions();\n    }, []);\n\n    return (\n        <div className={\"auction-list\"}>\n            <h3>Lista aukcji</h3>\n            <Navbar />\n            <div className={\"buttons\"}>\n                <Stack\n                    direction={\"row\"}\n                    spacing={\"4px\"}\n                    justifyContent={\"center\"}\n                >\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() => getAllAuctions()}\n                    >\n                        Odśwież aukcje\n                    </Button>\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() => history.push(\"/\")}\n                    >\n                        Powrót na strone główną\n                    </Button>\n                </Stack>\n            </div>\n            <SearchBar\n                setAuctions={setAuctions}\n                cancelSearch={getAllAuctions}\n                setAlertMessage={setAlertMessage}\n                handleClick={handleClick}\n            />\n            <div className={\"items\"}>\n                {auctions.map((n) => (\n                    <div\n                        className={\"space-bet\"}\n                        key={n._id}\n                        onClick={() => history.push(`/auctions/${n._id}`)}\n                    >\n                        <p>{n.name}</p>\n                        <p>Cena: {n.price}</p>\n                    </div>\n                ))}\n            </div>\n            <SnackbarComponent\n                alertMessage={alertMessage}\n                errorType={\"warning\"}\n                handleClose={handleClose}\n                open={open}\n            />\n        </div>\n    );\n};\n\nexport default AuctionList;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/AuctionDetails.js",["145","146","147"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport * as mqtt from \"mqtt\";\nimport Navbar from \"./Navbar\";\nimport { Button } from \"@mui/material\";\nimport { useConfirm } from \"material-ui-confirm\";\nimport Notification from \"./logged/Notification\";\nimport SnackbarComponent from \"./SnackbarComponent\";\n\nconst AuctionDetails = () => {\n    const params = useParams();\n    const history = useHistory();\n    const [data, setData] = useState([]);\n    const [client, setClient] = useState(null);\n    const [auctionCommentsLike, setauctionCommentsLikes] = useState([]);\n    const [auctionCommentsDislike, setauctionCommentsDislikes] = useState([]);\n    const [showComments, setShowComments] = useState(false);\n    const [tempLike, setTempLike] = useState(null);\n    const [tempDislike, setTempDislike] = useState(null);\n    const [watchers, setWatchers] = useState([]);\n    const [tempWatchers, setTempWatchers] = useState([]);\n    const [views, setViews] = useState(0);\n    const [tempViews, setTempViews] = useState(0);\n    const [amount, setAmount] = useState(0);\n    const [tempAmount, setTempAmount] = useState(0);\n    const [errorType, setErrorType] = useState(\"info\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const confirm = useConfirm();\n\n    const getData = () => {\n        axios\n            .get(`https://localhost:5000/auctions/${params.auctionId}`)\n            .then((res) => {\n                if (res.status === 200) {\n                    setData(res.data);\n                    setViews(res.data.views);\n                    setAmount(res.data.amount);\n                    setauctionCommentsLikes(\n                        res.data.comments.reduce((acc, curr) => {\n                            return [...acc, { id: curr._id, likes: [] }];\n                        }, [])\n                    );\n                    setauctionCommentsDislikes(\n                        res.data.comments.reduce((acc, curr) => {\n                            return [...acc, { id: curr._id, dislikes: [] }];\n                        }, [])\n                    );\n                    for (let i = 0; i < res.data.comments.length; i++) {\n                        client.subscribe(res.data.comments[i]._id);\n                        client.publish(res.data.comments[i]._id, \"GL\");\n                    }\n                } else {\n                    alert(\"Błąd ładowania danych\");\n                }\n            });\n    };\n    const mqttConnect = (host, mqttOption) => {\n        setClient(mqtt.connect(host, mqttOption));\n    };\n\n    useEffect(() => {\n        mqttConnect(\"mqtt://127.0.0.1:1884\", {\n            connectTimeout: 5000,\n            path: \"/mqtt\",\n        });\n    }, []);\n    useEffect(() => {\n        if (client) {\n            getData();\n            client.on(\"connect\", () => {\n                client.subscribe(params.auctionId);\n                client.publish(params.auctionId, \"GL\");\n                client.publish(params.auctionId, `+W${params.id}`);\n            });\n            client.on(\"error\", (err) => {\n                console.error(\"Connection error: \", err);\n                client.end();\n            });\n            client.on(\"message\", (topic, message) => {\n                const payload = { topic, message: message.toString() };\n                if (auctionCommentsLike && payload.message[0] === \"L\") {\n                    setTempLike(payload);\n                } else if (\n                    auctionCommentsDislike &&\n                    payload.message[0] === \"D\"\n                ) {\n                    setTempDislike(payload);\n                } else if (payload.message[0] === \"W\") {\n                    setTempWatchers(payload.message.slice(1).split(\"~\"));\n                } else if (payload.message[0] === \"V\") {\n                    setTempViews(payload.message.slice(1));\n                } else if (payload.message[0] === \"A\") {\n                    setTempAmount(payload.message.split(\"~\")[1]);\n                    if (payload.message.split(\"~\")[2] !== params.id) {\n                        setErrorType(\"info\");\n                        setAlertMessage(\"Ktoś własnie kupił ten produkt\");\n                        handleClick();\n                    }\n                }\n            });\n        }\n    }, [client]);\n\n    useEffect(() => {\n        setWatchers(tempWatchers);\n    }, [tempWatchers]);\n\n    useEffect(() => {\n        setViews(tempViews);\n    }, [tempViews]);\n\n    useEffect(() => {\n        setAmount(tempAmount);\n    }, [tempAmount]);\n\n    useEffect(() => {\n        if (tempLike) {\n            if (auctionCommentsLike.find((n) => n.id === tempLike.topic)) {\n                setauctionCommentsLikes([\n                    ...auctionCommentsLike.map((n) =>\n                        n.id === tempLike.topic\n                            ? {\n                                  id: tempLike.topic,\n                                  likes: [\n                                      ...tempLike.message\n                                          .slice(1)\n                                          .split(\"~\")\n                                          .filter((n) => n !== \"\"),\n                                  ],\n                              }\n                            : n\n                    ),\n                ]);\n            } else {\n                setauctionCommentsLikes([\n                    ...auctionCommentsLike,\n                    {\n                        id: tempLike.topic,\n                        likes: [\n                            ...tempLike.message\n                                .slice(1)\n                                .split(\"~\")\n                                .filter((n) => n !== \"\"),\n                        ],\n                    },\n                ]);\n            }\n        }\n    }, [tempLike]);\n\n    useEffect(() => {\n        if (tempDislike) {\n            if (\n                auctionCommentsDislike.find((n) => n.id === tempDislike.topic)\n            ) {\n                setauctionCommentsDislikes([\n                    ...auctionCommentsDislike.map((n) =>\n                        n.id === tempDislike.topic\n                            ? {\n                                  id: tempDislike.topic,\n                                  dislikes: [\n                                      ...tempDislike.message\n                                          .slice(1)\n                                          .split(\"~\")\n                                          .filter((n) => n !== \"\"),\n                                  ],\n                              }\n                            : n\n                    ),\n                ]);\n            } else {\n                setauctionCommentsDislikes([\n                    ...auctionCommentsDislike,\n                    {\n                        id: tempDislike.topic,\n                        dislikes: [\n                            ...tempDislike.message\n                                .slice(1)\n                                .split(\"~\")\n                                .filter((n) => n !== \"\"),\n                        ],\n                    },\n                ]);\n            }\n        }\n    }, [tempDislike]);\n\n    const [open, setOpen] = useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <div className={\"auction-details\"}>\n            <h3>Szczegóły aukcji</h3>\n            {params.id && params.id.toString() !== \"undefined\" ? null : (\n                <Navbar />\n            )}\n            <div className={\"details\"}>\n                <p>Nazwa: {data.name}</p>\n                <p>Cena: {data.price}</p>\n                <p>Opis produktu: {data.description}</p>\n                <p>Ilość produktu w magazynie: {amount}</p>\n                <p>\n                    Ilość osób obecnie oglądających produkt:{\" \"}\n                    {watchers.length - 1}\n                </p>\n                <p>Wyświetlenia produktu: {views}</p>\n                {data.user ? (\n                    <p\n                        className={\"clickable\"}\n                        onClick={() => {\n                            client.publish(params.auctionId, `-W${params.id}`);\n                            history.push(\n                                `/logged/${params.id}/user/${data.user._id}`\n                            );\n                        }}\n                    >\n                        Aukcja użytkownika: {data.user.login}\n                    </p>\n                ) : null}\n                {params.id &&\n                    params.id.toString() !== \"undefined\" &&\n                    amount > 0 &&\n                    data.user &&\n                    params.id !== data.user._id && (\n                        <Button\n                            variant={\"text\"}\n                            onClick={() => {\n                                confirm({\n                                    title: \"Czy na pewno chcesz kupić ten przedmiot?\",\n                                    confirmationText: \"Kup\",\n                                    cancellationText: \"Anuluj\",\n                                })\n                                    .then(() => {\n                                        client.publish(\n                                            data.user._id,\n                                            `buyIT${data._id}`\n                                        );\n                                        client.publish(\n                                            params.auctionId,\n                                            `-A${params.id}`\n                                        );\n                                    })\n                                    .catch(() => {});\n                            }}\n                        >\n                            Kup ten przedmiot\n                        </Button>\n                    )}\n                {data.comments &&\n                    data.comments.length > 0 &&\n                    (showComments ? (\n                        <Button\n                            variant={\"text\"}\n                            onClick={() => setShowComments(false)}\n                        >\n                            Zwiń komentarze\n                        </Button>\n                    ) : (\n                        <Button\n                            variant={\"text\"}\n                            onClick={() => setShowComments(true)}\n                        >\n                            Pokaż komentarze\n                        </Button>\n                    ))}\n                {params.id && params.id.toString() !== \"undefined\" ? (\n                    data.user && data.user._id !== params.id ? (\n                        <Button\n                            variant={\"text\"}\n                            onClick={() => {\n                                client.publish(\n                                    params.auctionId,\n                                    `-W${params.id}`\n                                );\n                                history.push(\n                                    `/logged/${params.id}/auction/${params.auctionId}/addComment`\n                                );\n                            }}\n                        >\n                            Dodaj komentarz\n                        </Button>\n                    ) : (\n                        <Button\n                            variant={\"text\"}\n                            onClick={() => {\n                                setAlertMessage(\n                                    \"Nie możesz dodać komentarza do swojej aukcji\"\n                                );\n                                setErrorType(\"warning\");\n                                handleClick();\n                            }}\n                        >\n                            Dodaj komentarz\n                        </Button>\n                    )\n                ) : (\n                    <Button\n                        variant={\"text\"}\n                        onClick={() => {\n                            setAlertMessage(\n                                \"Musisz być zalogowany, aby dodawać komentarze\"\n                            );\n                            setErrorType(\"warning\");\n                            handleClick();\n                        }}\n                    >\n                        Dodaj komentarz\n                    </Button>\n                )}\n                <Button\n                    variant={\"text\"}\n                    onClick={() => {\n                        client.publish(params.auctionId, `-W${params.id}`);\n                        history.goBack();\n                    }}\n                >\n                    Powrót\n                </Button>\n                {data.comments && data.comments.length > 0\n                    ? showComments && (\n                          <div className={\"comments\"}>\n                              <div className={\"comments-list\"}>\n                                  {data.comments.map((n) => (\n                                      <div key={n._id}>\n                                          <div className={\"content\"}>\n                                              {n.type ? (\n                                                  <div>\n                                                      {\" \"}\n                                                      Komentarz pozytywny\n                                                  </div>\n                                              ) : (\n                                                  <div>\n                                                      {\" \"}\n                                                      Komentarz negatywny\n                                                  </div>\n                                              )}\n                                              <div>Treść: {n.comment}</div>\n                                          </div>\n                                          <div className={\"likes\"}>\n                                              {auctionCommentsLike &&\n                                                  auctionCommentsLike.length >\n                                                      0 && (\n                                                      <p>\n                                                          Ilość polubień:{\" \"}\n                                                          {auctionCommentsLike.find(\n                                                              (k) =>\n                                                                  k.id === n._id\n                                                          ).likes.length -\n                                                              1}{\" \"}\n                                                      </p>\n                                                  )}\n                                              {auctionCommentsDislike &&\n                                                  auctionCommentsDislike.length >\n                                                      0 && (\n                                                      <p>\n                                                          Ilość reakcji nie\n                                                          lubię:{\" \"}\n                                                          {auctionCommentsDislike.find(\n                                                              (k) =>\n                                                                  k.id === n._id\n                                                          ).dislikes.length -\n                                                              1}{\" \"}\n                                                      </p>\n                                                  )}\n                                              <Button\n                                                  variant={\"text\"}\n                                                  onClick={() => {\n                                                      !params.id\n                                                          ? setAlertMessage(\n                                                                \"Musisz się zalogować, aby móc zaregować na dany komentarz\"\n                                                            ) ||\n                                                            setErrorType(\n                                                                \"warning\"\n                                                            ) ||\n                                                            handleClick()\n                                                          : auctionCommentsDislike\n                                                                .filter(\n                                                                    (k) =>\n                                                                        k.id ===\n                                                                        n._id\n                                                                )[0]\n                                                                .dislikes.includes(\n                                                                    params.id\n                                                                )\n                                                          ? setAlertMessage(\n                                                                \"Możesz tylko polubić lub nie polubić dany komentarz\"\n                                                            ) ||\n                                                            setErrorType(\n                                                                \"warning\"\n                                                            ) ||\n                                                            handleClick()\n                                                          : auctionCommentsLike\n                                                                .filter(\n                                                                    (k) =>\n                                                                        k.id ===\n                                                                        n._id\n                                                                )[0]\n                                                                .likes.includes(\n                                                                    params.id\n                                                                )\n                                                          ? client.publish(\n                                                                n._id,\n                                                                `-L${params.id}`\n                                                            )\n                                                          : client.publish(\n                                                                n._id,\n                                                                `+L${params.id}`\n                                                            );\n                                                  }}\n                                              >\n                                                  Lubię\n                                              </Button>\n                                              <Button\n                                                  variant={\"text\"}\n                                                  onClick={() => {\n                                                      !params.id\n                                                          ? setAlertMessage(\n                                                                \"Musisz się zalogować, aby móc zaregować na dany komentarz\"\n                                                            ) ||\n                                                            setErrorType(\n                                                                \"warning\"\n                                                            ) ||\n                                                            handleClick()\n                                                          : auctionCommentsLike\n                                                                .filter(\n                                                                    (k) =>\n                                                                        k.id ===\n                                                                        n._id\n                                                                )[0]\n                                                                .likes.includes(\n                                                                    params.id\n                                                                )\n                                                          ? setAlertMessage(\n                                                                \"Możesz tylko polubić lub nie polubić dany komentarz\"\n                                                            ) ||\n                                                            setErrorType(\n                                                                \"warning\"\n                                                            ) ||\n                                                            handleClick()\n                                                          : auctionCommentsDislike\n                                                                .filter(\n                                                                    (k) =>\n                                                                        k.id ===\n                                                                        n._id\n                                                                )[0]\n                                                                .dislikes.includes(\n                                                                    params.id\n                                                                )\n                                                          ? client.publish(\n                                                                n._id,\n                                                                `-D${params.id}`\n                                                            )\n                                                          : client.publish(\n                                                                n._id,\n                                                                `+D${params.id}`\n                                                            );\n                                                  }}\n                                              >\n                                                  Nie lubię\n                                              </Button>\n                                          </div>\n                                          <div className={\"buttons\"}>\n                                              {n.author === params.id ||\n                                              params.id ===\n                                                  \"000000000000000000000000\" ? (\n                                                  <div>\n                                                      <Button\n                                                          variant={\"text\"}\n                                                          onClick={() =>\n                                                              history.push(\n                                                                  `/logged/${params.id}/auction/${params.auctionId}/editComment/${n._id}`\n                                                              )\n                                                          }\n                                                      >\n                                                          Edytuj komentarz\n                                                      </Button>\n                                                      <Button\n                                                          variant={\"text\"}\n                                                          onClick={() =>\n                                                              confirm({\n                                                                  title: \"Czy na pewno chcesz usnunąć ten komentarz?\",\n                                                                  confirmationText:\n                                                                      \"Usuń komentarz\",\n                                                                  cancellationText:\n                                                                      \"Anuluj\",\n                                                              })\n                                                                  .then(() => {\n                                                                      axios\n                                                                          .delete(\n                                                                              `https://localhost:5000/auctionComments/deleteAuctionComment/${n._id}`\n                                                                          )\n                                                                          .then(\n                                                                              (\n                                                                                  res\n                                                                              ) => {\n                                                                                  if (\n                                                                                      res.status ===\n                                                                                      200\n                                                                                  ) {\n                                                                                      setErrorType(\n                                                                                          \"success\"\n                                                                                      );\n                                                                                      setAlertMessage(\n                                                                                          \"Udało się usunąć komentarz\"\n                                                                                      );\n                                                                                      handleClick();\n                                                                                      getData();\n                                                                                  } else {\n                                                                                      setErrorType(\n                                                                                          \"error\"\n                                                                                      );\n                                                                                      setAlertMessage(\n                                                                                          \"Nie udało się usnąć komentarza\"\n                                                                                      );\n                                                                                      handleClick();\n                                                                                  }\n                                                                              }\n                                                                          );\n                                                                  })\n                                                                  .catch(\n                                                                      () => {}\n                                                                  )\n                                                          }\n                                                      >\n                                                          Usuń komentarz\n                                                      </Button>\n                                                  </div>\n                                              ) : null}\n                                          </div>\n                                      </div>\n                                  ))}\n                              </div>\n                          </div>\n                      )\n                    : null}\n                <SnackbarComponent\n                    alertMessage={alertMessage}\n                    errorType={errorType}\n                    handleClose={handleClose}\n                    open={open}\n                />\n            </div>\n            <Notification />\n        </div>\n    );\n};\n\nexport default AuctionDetails;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/Dashboard.js",["148"],"import { useHistory } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport Navbar from \"./Navbar\";\n\nconst Dashboard = () => {\n    const history = useHistory();\n\n    useEffect(() => {\n        let savedLogin = Cookies.get(\"AuctionPageSavedLogin\");\n        if (savedLogin) {\n            axios\n                .post(\"https://localhost:5000/users/login\", {\n                    login: savedLogin.split(\"/\")[0],\n                    password: savedLogin.split(\"/\")[1],\n                })\n                .then((res) => {\n                    if (res.status === 200) {\n                        if (res.data) {\n                            history.push(`/logged/${res.data._id}`);\n                        }\n                    } else {\n                        alert(\"Nie udało się zalogować. Błąd serwera\");\n                    }\n                });\n        }\n    }, []);\n\n    return (\n        <div className={\"main\"}>\n            <h3>Strona główna</h3>\n            <Navbar />\n        </div>\n    );\n};\n\nexport default Dashboard;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/LoginPage.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/Chat.js",["149","150"],"import React, { useEffect, useState } from \"react\";\nimport * as mqtt from \"mqtt\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport NavbarLogged from \"../NavbarLogged\";\nimport { Alert, Button, Snackbar, Stack, TextField } from \"@mui/material\";\nimport Notification from \"../Notification\";\n\nconst Chat = () => {\n    const [client, setClient] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [login, setLogin] = useState(\"\");\n    const [temp, setTemp] = useState(\"\");\n    const [newMess, setNewMess] = useState(\"\");\n    const params = useParams();\n    const history = useHistory();\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n    const mqttConnect = (host, mqttOption) => {\n        setClient(mqtt.connect(host, mqttOption));\n    };\n    useEffect(() => {\n        mqttConnect(\"mqtt://127.0.0.1:1884\", {\n            connectTimeout: 5000,\n            path: \"/mqtt\",\n        });\n        setTimeout(() => {\n            updateScroll();\n        }, 1000);\n    }, []);\n    useEffect(() => {\n        if (client) {\n            client.on(\"connect\", () => {\n                axios\n                    .get(`https://localhost:5000/users/${params.id}`)\n                    .then((res) => {\n                        const dateTime = new Date();\n                        setLogin(res.data.login);\n                        client.publish(\n                            params.chat,\n                            `${dateTime.toLocaleString()} Użytkownik ${\n                                res.data.login\n                            } dołączył do czatu`\n                        );\n                        client.subscribe(params.chat);\n                        client.subscribe(\"~\" + params.chat);\n                    });\n            });\n            client.on(\"error\", (err) => {\n                console.error(\"Connection error: \", err);\n                client.end();\n            });\n            client.on(\"message\", (topic, message) => {\n                const payload = { topic, message: message.toString() };\n                if (payload.topic[0] === \"~\") {\n                    const allMessages = payload.message\n                        .split(\"~\")\n                        .filter((n) => n !== \"\")\n                        .reduce((acc, curr) => {\n                            return [...acc, curr];\n                        }, []);\n                    setMessages(allMessages);\n                    client.unsubscribe(\"~\" + params.chat);\n                } else {\n                    if (payload.message !== \"~DELETE\") {\n                        setTemp(payload.message);\n                    }\n                }\n            });\n        }\n    }, [client]);\n\n    useEffect(() => {\n        setMessages([...messages, temp]);\n    }, [temp]);\n\n    const handleSend = () => {\n        if (newMess === \"\") {\n            setAlertMessage(\"Wpisz wiadomość\");\n            handleClick();\n        } else if (newMess.length > 500) {\n            setAlertMessage(\"Wiadomość może mieć maksymalnie 500 znaków\");\n            handleClick();\n        } else if (newMess.includes(\"~\")) {\n            setAlertMessage(\"Wiadomość nie może zawierać znaku ~\");\n            handleClick();\n        } else {\n            const dateTime = new Date();\n            client.publish(\n                params.chat,\n                `${dateTime.toLocaleString()} ${login}: ${newMess}`\n            );\n        }\n    };\n\n    function updateScroll() {\n        const element = document.getElementById(\"messages\");\n        element.scrollTop = element.scrollHeight;\n    }\n\n    return (\n        <div className={\"auction-list\"}>\n            <h3>Pokój: {params.chat}</h3>\n            <NavbarLogged />\n            <div className={\"buttons\"}>\n                <Stack\n                    direction={\"row\"}\n                    spacing={\"4px\"}\n                    justifyContent={\"center\"}\n                >\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() => {\n                            const dateTime = new Date();\n                            client.publish(\n                                params.chat,\n                                `${dateTime.toLocaleString()} Użytkownik ${login} opuścił czat`\n                            );\n                            history.goBack();\n                        }}\n                    >\n                        Powrót\n                    </Button>\n                </Stack>\n            </div>\n            <div className={\"chat\"}>\n                <div className={\"messages\"} id={\"messages\"}>\n                    {messages.length > 0 &&\n                        messages.map((n) => (\n                            <div key={n}>\n                                <p>{n.slice(0, 20)}</p>\n                                <p>{n.slice(20)}</p>\n                            </div>\n                        ))}\n                </div>\n                <div className={\"mess\"}>\n                    <TextField\n                        id={\"outlined\"}\n                        onChange={(event) => setNewMess(event.target.value)}\n                        fullWidth\n                        placeholder={\"Wpisz wiadomość\"}\n                    />\n                    {messages[messages.length - 1] !==\n                        \"Pokój ten został zamknięty\" && (\n                        <Button\n                            variant={\"outlined\"}\n                            onClick={() => {\n                                handleSend();\n                                setTimeout(() => {\n                                    updateScroll();\n                                }, 200);\n                                document.getElementById(\"outlined\").value = \"\";\n                            }}\n                        >\n                            Wyślij\n                        </Button>\n                    )}\n                </div>\n            </div>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n                <Alert\n                    onClose={handleClose}\n                    severity=\"warning\"\n                    sx={{ width: \"100%\" }}\n                >\n                    {alertMessage}\n                </Alert>\n            </Snackbar>\n            <Notification />\n        </div>\n    );\n};\n\nexport default Chat;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/ChatRoomForm.js",["151"],"import React, { useEffect, useState } from \"react\";\nimport * as mqtt from \"mqtt\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Button, Stack } from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport Notification from \"../Notification\";\nimport SnackbarComponent from \"../../SnackbarComponent\";\n\nconst ChatRoomForm = () => {\n    const history = useHistory();\n    const params = useParams();\n    const [client, setClient] = useState(null);\n    const [rooms, setRooms] = useState([]);\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n    const mqttConnect = (host, mqttOption) => {\n        setClient(mqtt.connect(host, mqttOption));\n    };\n    const [roomName, setRoomName] = useState(\"\");\n    const handleSubmit = () => {\n        if (roomName === \"\") {\n            setAlertMessage(\"Podaj nazwę pokoju\");\n            handleClick();\n        } else if (roomName.includes(\"~\")) {\n            setAlertMessage(\"Nazwa pokoju nie może zawierać ~\");\n            handleClick();\n        } else if (rooms.map((n) => n.split(\":\")[0]).includes(roomName)) {\n            setAlertMessage(\"Pokój o takie nazwie już istnieje\");\n            handleClick();\n        } else {\n            client.publish(\"addRoom\", roomName + \"~\" + params.id);\n            history.goBack();\n        }\n    };\n\n    useEffect(() => {\n        if (client) {\n            client.on(\"connect\", () => {\n                client.subscribe(\"chatRooms\");\n                client.publish(\"chatRooms\", \"getRooms\");\n            });\n            client.on(\"error\", (err) => {\n                console.error(\"Connection error: \", err);\n                client.end();\n            });\n            client.on(\"message\", (topic, message) => {\n                const payload = { topic, message: message.toString() };\n                if (\n                    payload.topic === \"chatRooms\" &&\n                    payload.message !== \"getRooms\"\n                ) {\n                    if (\n                        rooms !==\n                        payload.message.split(\"~\").filter((n) => n !== \"\")\n                    ) {\n                        setRooms(\n                            payload.message.split(\"~\").filter((n) => n !== \"\")\n                        );\n                    }\n                }\n            });\n        }\n    }, [client]);\n\n    useEffect(() => {\n        mqttConnect(\"mqtt://127.0.0.1:1884\", {\n            connectTimeout: 5000,\n            path: \"/mqtt\",\n        });\n    }, []);\n\n    return (\n        <div className={\"login\"}>\n            <div className={\"form\"}>\n                <h3>Dodaj pokój czatu</h3>\n                <Box\n                    component=\"form\"\n                    sx={{\n                        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                    flexWrap={\"wrap\"}\n                >\n                    <Stack>\n                        <TextField\n                            id=\"outlined\"\n                            label=\"Nazwa pokoju\"\n                            onChange={(event) =>\n                                setRoomName(event.target.value)\n                            }\n                        />\n                    </Stack>\n                    <Stack\n                        spacing={2}\n                        direction=\"row\"\n                        justifyContent={\"center\"}\n                    >\n                        <Button\n                            variant={\"text\"}\n                            onClick={() => history.goBack()}\n                        >\n                            Powrót\n                        </Button>\n                        <Button\n                            variant={\"outlined\"}\n                            onClick={() => handleSubmit()}\n                        >\n                            Dodaj pokój\n                        </Button>\n                    </Stack>\n                </Box>\n                <SnackbarComponent\n                    alertMessage={alertMessage}\n                    errorType={\"error\"}\n                    handleClose={handleClose}\n                    open={open}\n                />\n            </div>\n            <Notification />\n        </div>\n    );\n};\n\nexport default ChatRoomForm;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/MyDMChats.js",["152"],"import React, { useEffect, useState } from \"react\";\nimport * as mqtt from \"mqtt\";\nimport axios from \"axios\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport NavbarLogged from \"../NavbarLogged\";\nimport { Button, Stack } from \"@mui/material\";\nimport Notification from \"../Notification\";\n\nconst MyDMChats = () => {\n    const params = useParams();\n    const history = useHistory();\n    const [client, setClient] = useState(null);\n    const [dms, setDms] = useState([]);\n    const [users, setUsers] = useState([]);\n    const mqttConnect = (host, mqttOption) => {\n        setClient(mqtt.connect(host, mqttOption));\n    };\n    useEffect(() => {\n        axios.get(\"https://localhost:5000/users\").then((res) => {\n            if (res.status === 200) {\n                setUsers(res.data);\n            }\n        });\n        mqttConnect(\"mqtt://127.0.0.1:1884\", {\n            connectTimeout: 5000,\n            path: \"/mqtt\",\n        });\n    }, []);\n\n    useEffect(() => {\n        if (client) {\n            client.on(\"connect\", () => {\n                client.subscribe(\"DMChats\");\n                client.publish(\"DMChats\", \"getDM\");\n            });\n            client.on(\"error\", (err) => {\n                console.error(\"Connection error: \", err);\n                client.end();\n            });\n            client.on(\"message\", (topic, message) => {\n                const payload = { topic, message: message.toString() };\n                if (\n                    payload.topic === \"DMChats\" &&\n                    payload.message !== \"getDM\"\n                ) {\n                    if (\n                        dms !==\n                        payload.message.split(\"~\").filter((n) => n !== \"\")\n                    ) {\n                        setDms(\n                            payload.message\n                                .split(\"~\")\n                                .filter((n) => n !== \"\")\n                                .filter(\n                                    (n) =>\n                                        n.split(\":\")[0] === params.id ||\n                                        n.split(\":\")[1] === params.id\n                                )\n                                .map((n) =>\n                                    n.split(\":\")[0] === params.id\n                                        ? n.split(\":\")[1]\n                                        : n.split(\":\")[0]\n                                )\n                        );\n                    }\n                }\n            });\n        }\n    }, [client]);\n\n    return (\n        <div className={\"auction-list\"}>\n            <h3>Prywatne czaty</h3>\n            <NavbarLogged />\n            <div className={\"buttons\"}>\n                <Stack\n                    direction={\"row\"}\n                    spacing={\"4px\"}\n                    justifyContent={\"center\"}\n                >\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() => history.goBack()}\n                    >\n                        Powrót\n                    </Button>\n                </Stack>\n            </div>\n            {\n                <div className={\"items\"}>\n                    {users &&\n                    dms &&\n                    users.length > 0 &&\n                    dms.filter((n) => users.map((k) => k._id).includes(n))\n                        .length > 0 ? (\n                        dms\n                            .filter((n) => users.map((k) => k._id).includes(n))\n                            .map((n) => users.find((k) => n === k._id))\n                            .map((n) => (\n                                <div\n                                    key={n._id}\n                                    onClick={() =>\n                                        history.push(\n                                            `/logged/${params.id}/dmchat/${n._id}`\n                                        )\n                                    }\n                                >\n                                    <p>{n.login}</p>\n                                </div>\n                            ))\n                    ) : (\n                        <div key={\"none\"}>\n                            <p>Brak prywatnych czatów</p>\n                        </div>\n                    )}\n                </div>\n            }\n            <Notification />\n        </div>\n    );\n};\n\nexport default MyDMChats;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/chats/DMChat.js",["153","154","155"],"import React, { useEffect, useState } from \"react\";\nimport * as mqtt from \"mqtt\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport NavbarLogged from \"../NavbarLogged\";\nimport { Alert, Button, Snackbar, Stack, TextField } from \"@mui/material\";\nimport Notification from \"../Notification\";\n\nconst DMChat = () => {\n    const [client, setClient] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [login, setLogin] = useState(\"\");\n    const [temp, setTemp] = useState(\"\");\n    const [newMess, setNewMess] = useState(\"\");\n    const [chatter, setChatter] = useState(\"\");\n    const params = useParams();\n    const history = useHistory();\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n    const mqttConnect = (host, mqttOption) => {\n        setClient(mqtt.connect(host, mqttOption));\n    };\n    useEffect(() => {\n        mqttConnect(\"mqtt://127.0.0.1:1884\", {\n            connectTimeout: 5000,\n            path: \"/mqtt\",\n        });\n        setTimeout(() => {\n            updateScroll();\n        }, 1000);\n        axios\n            .get(`https://localhost:5000/users/${params.chatter}`)\n            .then((res) => {\n                if (res.status === 200) {\n                    setChatter(res.data.login);\n                }\n            });\n        axios.get(`https://localhost:5000/users/${params.id}`).then((res) => {\n            if (res.status === 200) {\n                setLogin(res.data.login);\n            }\n        });\n    }, []);\n    useEffect(() => {\n        if (client) {\n            client.on(\"connect\", () => {\n                const topic = `${_.sortBy([params.id, params.chatter])[0]}:${\n                    _.sortBy([params.id, params.chatter])[1]\n                }`;\n                client.subscribe(topic);\n                client.subscribe(`~${topic}`);\n                client.publish(topic, \"~getMessages\");\n            });\n            client.on(\"error\", (err) => {\n                console.error(\"Connection error: \", err);\n                client.end();\n            });\n            client.on(\"message\", (topic, message) => {\n                const payload = { topic, message: message.toString() };\n                if (payload.topic[0] === \"~\") {\n                    const allMessages = payload.message\n                        .split(\"~\")\n                        .filter((n) => n !== \"\")\n                        .reduce((acc, curr) => {\n                            return [...acc, curr];\n                        }, []);\n                    setMessages(allMessages);\n                    client.unsubscribe(\n                        `~${_.sortBy([params.id, params.chatter])[0]}:${\n                            _.sortBy([params.id, params.chatter])[1]\n                        }`\n                    );\n                } else {\n                    if (payload.message !== \"~getMessages\") {\n                        setTemp(payload.message);\n                    }\n                }\n            });\n        }\n    }, [client]);\n\n    useEffect(() => {\n        setMessages([...messages, temp]);\n    }, [temp]);\n\n    const handleSend = () => {\n        if (newMess === \"\") {\n            setAlertMessage(\"Wpisz wiadomość\");\n            handleClick();\n        } else if (newMess.length > 500) {\n            setAlertMessage(\"Wiadomość może mieć maksymalnie 500 znaków\");\n            handleClick();\n        } else if (newMess.includes(\"~\")) {\n            setAlertMessage(\"Wiadomość nie może zawierać znaku ~\");\n            handleClick();\n        } else {\n            const dateTime = new Date();\n            client.publish(params.chatter, `newMS${params.id}`);\n            client.publish(\n                `${_.sortBy([params.id, params.chatter])[0]}:${\n                    _.sortBy([params.id, params.chatter])[1]\n                }`,\n                `${dateTime.toLocaleString()} ${login}: ${newMess}`\n            );\n        }\n    };\n\n    function updateScroll() {\n        const element = document.getElementById(\"messages\");\n        if (element !== null) {\n            element.scrollTop = element.scrollHeight;\n        }\n    }\n\n    return (\n        <div className={\"auction-list\"}>\n            <h3\n                className={\"clickable\"}\n                onClick={() =>\n                    history.push(`/logged/${params.id}/user/${params.chatter}`)\n                }\n            >\n                Rozmowa z {chatter}\n            </h3>\n            <NavbarLogged />\n            <div className={\"buttons\"}>\n                <Stack\n                    direction={\"row\"}\n                    spacing={\"4px\"}\n                    justifyContent={\"center\"}\n                >\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() => {\n                            history.goBack();\n                        }}\n                    >\n                        Powrót\n                    </Button>\n                </Stack>\n            </div>\n            <div className={\"chat\"}>\n                <div className={\"messages\"} id={\"messages\"}>\n                    {messages.length > 0 &&\n                        messages.map((n) => (\n                            <div key={n}>\n                                <p>{n.slice(0, 20)}</p>\n                                <p>{n.slice(20)}</p>\n                            </div>\n                        ))}\n                </div>\n                <div className={\"mess\"}>\n                    <TextField\n                        id={\"outlined\"}\n                        onChange={(event) => setNewMess(event.target.value)}\n                        fullWidth\n                        placeholder={\"Wpisz wiadomość\"}\n                    />\n                    {messages[messages.length - 1] !==\n                        \"Pokój ten został zamknięty przez właściciela\" && (\n                        <Button\n                            variant={\"outlined\"}\n                            onClick={() => {\n                                handleSend();\n                                setTimeout(() => {\n                                    updateScroll();\n                                }, 200);\n                                document.getElementById(\"outlined\").value = \"\";\n                            }}\n                        >\n                            Wyślij\n                        </Button>\n                    )}\n                </div>\n                <Snackbar\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                >\n                    <Alert\n                        onClose={handleClose}\n                        severity=\"warning\"\n                        sx={{ width: \"100%\" }}\n                    >\n                        {alertMessage}\n                    </Alert>\n                </Snackbar>\n            </div>\n            <Notification />\n        </div>\n    );\n};\n\nexport default DMChat;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/Account.js",["156"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport NavbarLogged from \"../NavbarLogged\";\nimport Notification from \"../Notification\";\n\nconst Account = () => {\n    const params = useParams();\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        axios.get(`https://localhost:5000/users/${params.id}`).then((res) => {\n            setData(res.data);\n        });\n    }, []);\n\n    return (\n        <div className={\"main\"}>\n            <h3>Witaj {data.login}</h3>\n            <NavbarLogged />\n            <Notification />\n        </div>\n    );\n};\n\nexport default Account;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/ChangePasswordForm.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/AllAuctions.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/DeleteAccount.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/EditAccount.js",["157"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Box from \"@mui/material/Box\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogTitle,\n    FormControl,\n    IconButton,\n    InputAdornment,\n    InputLabel,\n    OutlinedInput,\n    Stack,\n} from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport Notification from \"../Notification\";\nimport SnackbarComponent from \"../../SnackbarComponent\";\nimport DialogComponent from \"../../DialogComponent\";\n\nconst EditAccount = () => {\n    const params = useParams();\n    const history = useHistory();\n    const [firstLogin, setFirstLogin] = useState(\"\");\n    const [login, setLogin] = useState(\"\");\n    const [pass, setPass] = useState(\"\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [openDialog, setOpenDialog] = useState(false);\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n    const handleClickOpen = () => {\n        setOpenDialog(true);\n    };\n    const [open, setOpen] = useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const [values, setValues] = useState({\n        amount: \"\",\n        password: \"\",\n        weight: \"\",\n        weightRange: \"\",\n        showPassword: false,\n    });\n    const handleRegister = () => {\n        let info = [];\n        if (login.length < 3) {\n            info.push(\"Login jest za krótki. Minimalnie 3 znaki.\");\n        } else if (login.length > 30) {\n            info.push(\"Login jest za długi. Maksymalnie 30 znaków.\");\n        }\n        if (pass.length < 8) {\n            info.push(\"\\nHasło jest za krótkie. Minimalnie 8 znaków.\");\n        } else if (pass.length > 30) {\n            info.push(\"\\nHasło jest za długie. Maksymalnie 30 znaków.\");\n        }\n        if (info.length === 0) {\n            axios.get(\"https://localhost:5000/users/logins\").then((req) => {\n                if (req.data.includes(login)) {\n                    setAlertMessage(\"Login jest już zajęty\");\n                    handleClick();\n                } else {\n                    axios\n                        .put(\n                            `https://localhost:5000/users/editAccount/${params.userId}`,\n                            {\n                                login: login,\n                                password: pass,\n                            }\n                        )\n                        .then((res) => {\n                            if (res.data === true) {\n                                handleClickOpen();\n                            } else {\n                                setAlertMessage(\n                                    \"Nie udało się edytować użytkownika\"\n                                );\n                                handleClick();\n                            }\n                        });\n                }\n            });\n        } else {\n            setAlertMessage(info);\n            handleClick();\n        }\n    };\n\n    const handleChange = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n    const handleClickShowPassword = () => {\n        setValues({\n            ...values,\n            showPassword: !values.showPassword,\n        });\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    useEffect(() => {\n        axios\n            .get(`https://localhost:5000/users/${params.userId}`)\n            .then((res) => {\n                if (res.status === 200) {\n                    setLogin(res.data.login);\n                    setPass(res.data.password);\n                    setFirstLogin(res.data.login);\n                } else {\n                    setAlertMessage(\"Błąd ładowania danych\");\n                    handleClick();\n                }\n            });\n    }, []);\n\n    return (\n        <div className={\"login\"}>\n            <div className={\"form\"}>\n                <h3>Edycja użytkownika {firstLogin}</h3>\n                <Box\n                    component=\"form\"\n                    sx={{\n                        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                    flexWrap={\"wrap\"}\n                >\n                    <Stack>\n                        <TextField\n                            id=\"outlined\"\n                            label=\"Login\"\n                            value={login}\n                            onChange={(event) => setLogin(event.target.value)}\n                        />\n                        <FormControl\n                            sx={{ m: 1, width: \"25ch\" }}\n                            variant=\"outlined\"\n                            onChange={(event) => setPass(event.target.value)}\n                        >\n                            <InputLabel htmlFor=\"outlined-adornment-password\">\n                                Hasło\n                            </InputLabel>\n                            <OutlinedInput\n                                id=\"outlined-adornment-password\"\n                                type={values.showPassword ? \"text\" : \"password\"}\n                                value={pass}\n                                onChange={handleChange(\"password\")}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"Zmień widoczność hasła\"\n                                            onClick={handleClickShowPassword}\n                                            onMouseDown={\n                                                handleMouseDownPassword\n                                            }\n                                            edge=\"end\"\n                                        >\n                                            {values.showPassword ? (\n                                                <VisibilityOff />\n                                            ) : (\n                                                <Visibility />\n                                            )}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                label=\"Password\"\n                            />\n                        </FormControl>\n                    </Stack>\n                    <Stack\n                        spacing={2}\n                        direction=\"row\"\n                        justifyContent={\"center\"}\n                    >\n                        <Button\n                            variant={\"text\"}\n                            onClick={() => history.goBack()}\n                        >\n                            Powrót\n                        </Button>\n                        <Button\n                            variant={\"contained\"}\n                            onClick={() => handleRegister()}\n                        >\n                            Zatwierdź zmiany\n                        </Button>\n                    </Stack>\n                </Box>\n                <SnackbarComponent\n                    alertMessage={alertMessage}\n                    errorType={\"error\"}\n                    handleClose={handleClose}\n                    open={open}\n                />\n            </div>\n            <Dialog\n                position={\"absolute\"}\n                open={openDialog}\n                onClose={handleCloseDialog}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">\n                    {\"Użytkownik został pomyślnie edytowany\"}\n                </DialogTitle>\n                <DialogActions>\n                    <Button onClick={() => history.goBack()}>Powrót</Button>\n                </DialogActions>\n            </Dialog>\n            <DialogComponent\n                title={\"Użytkownik został pomyślnie edytowany\"}\n                openDialog={openDialog}\n                handleCloseDialog={handleCloseDialog}\n                firstButtonAction={() => history.goBack()}\n                firstButtonDesc={\"Powrót\"}\n            />\n            <Notification />\n        </div>\n    );\n};\n\nexport default EditAccount;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/account/AccountManagement.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/MyAuctions.js",["158"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport SearchBar from \"../../SearchBar\";\nimport NavbarLogged from \"../NavbarLogged\";\nimport { Button, Stack } from \"@mui/material\";\nimport { useConfirm } from \"material-ui-confirm\";\nimport Notification from \"../Notification\";\nimport SnackbarComponent from \"../../SnackbarComponent\";\n\nconst MyAuctions = () => {\n    const params = useParams();\n    const history = useHistory();\n    const confirm = useConfirm();\n    const [auctions, setAuctions] = useState([]);\n    const [open, setOpen] = React.useState(false);\n    const [errorType, setErrorType] = useState(\"info\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const getMyAuctions = () => {\n        axios\n            .get(`https://localhost:5000/users/auctions/${params.id}`)\n            .then((res) => {\n                if (res.status === 200) {\n                    setAuctions(res.data);\n                } else {\n                    setAlertMessage(\"Błąd ładowania danych\");\n                    setErrorType(\"error\");\n                    handleClick();\n                }\n            });\n    };\n\n    useEffect(() => {\n        getMyAuctions();\n    }, []);\n\n    const handleDelete = (values) => {\n        confirm({\n            title: \"Czy na pewno chcesz usnunąć tą aukcje?\",\n            confirmationText: \"Usuń aukcje\",\n            cancellationText: \"Anuluj\",\n        })\n            .then(() => {\n                axios\n                    .delete(\n                        `https://localhost:5000/auctions/deleteAuction/${values}`\n                    )\n                    .then((res) => {\n                        if (res.status === 200) {\n                            setAlertMessage(\"Udało się usunąć aukcje\");\n                            setErrorType(\"success\");\n                            setAuctions(\n                                auctions.filter((n) => n._id !== values)\n                            );\n                            handleClick();\n                        } else {\n                            setAlertMessage(\"Nie udało się usunąć aukcji\");\n                            setErrorType(\"error\");\n                            handleClick();\n                        }\n                    });\n            })\n            .catch(() => {});\n    };\n\n    return (\n        <div className={\"auction-list\"}>\n            <h3>Lista moich aukcji</h3>\n            <NavbarLogged />\n            <div className={\"buttons\"}>\n                <Stack\n                    direction={\"row\"}\n                    spacing={\"4px\"}\n                    justifyContent={\"center\"}\n                >\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() => history.goBack()}\n                    >\n                        Powrót\n                    </Button>\n                </Stack>\n            </div>\n            <SearchBar setAuctions={setAuctions} cancelSearch={getMyAuctions} />\n            <div className={\"items\"}>\n                {auctions.map((n) => (\n                    <div>\n                        <div\n                            key={n._id}\n                            onClick={() =>\n                                history.push(\n                                    `/logged/${params.id}/auction/${n._id}`\n                                )\n                            }\n                            className={\"details\"}\n                        >\n                            <p>Nazwa: {n.name}</p>\n                            <p>Cena: {n.price}</p>\n                            <p>Ilość: {n.amount}</p>\n                            <p>Opis: {n.description}</p>\n                        </div>\n                        <div className={\"buttons\"}>\n                            <Button\n                                variant={\"text\"}\n                                onClick={() =>\n                                    history.push(\n                                        `/logged/${params.id}/editAuction/${n._id}`\n                                    )\n                                }\n                            >\n                                Edytuj aukcje\n                            </Button>\n                            <Button\n                                variant={\"text\"}\n                                onClick={() => handleDelete(n._id)}\n                            >\n                                Usuń aukcję\n                            </Button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <SnackbarComponent\n                alertMessage={alertMessage}\n                errorType={errorType}\n                handleClose={handleClose}\n                open={open}\n            />\n\n            <Notification />\n        </div>\n    );\n};\n\nexport default MyAuctions;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/AuctionCommentForm.js",["159"],"import axios from \"axios\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport {\n    Button,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    Stack,\n} from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport Notification from \"../Notification\";\nimport SnackbarComponent from \"../../SnackbarComponent\";\nimport DialogComponent from \"../../DialogComponent\";\n\nconst AuctionCommentForm = () => {\n    const params = useParams();\n    const history = useHistory();\n    const [comment, setComment] = useState(\"\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [openDialog, setOpenDialog] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [opinionType, setOpinionType] = useState(true);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n    const handleClickOpen = () => {\n        setOpenDialog(true);\n    };\n    const [init, setInit] = useState({\n        comment: \"\",\n        type: true,\n        author: params.id,\n        auction: params.auctionId,\n    });\n\n    const handleSubmit = () => {\n        if (comment.length < 1) {\n            setAlertMessage(\"Komentarz musi zawierać jakąś treść.\");\n            handleClick();\n        } else if (comment.length > 200) {\n            setAlertMessage(\"Komentarz jest za długi. Maksymalnie 200 znaków.\");\n            handleClick();\n        } else if (opinionType === null) {\n            setAlertMessage(\"Wybierz rodzaj komentarza\");\n            handleClick();\n        } else {\n            const preparedData = {\n                ...init,\n                comment: comment,\n                type: opinionType,\n            };\n            if (params.auctionCommentId) {\n                axios\n                    .put(\n                        \"https://localhost:5000/auctionComments/editAuctionComment\",\n                        preparedData\n                    )\n                    .then((res) => {\n                        if (res.status === 200) {\n                            handleClickOpen();\n                        } else {\n                            setAlertMessage(\n                                \"Nie udało się edytować komentarza\"\n                            );\n                            handleClick();\n                        }\n                    });\n            } else {\n                axios\n                    .post(\n                        \"https://localhost:5000/auctionComments/addAuctionComment\",\n                        preparedData\n                    )\n                    .then((res) => {\n                        if (res.status === 200) {\n                            handleClickOpen();\n                        } else {\n                            setAlertMessage(\"Nie udało się dodać komentarza\");\n                            handleClick();\n                        }\n                    });\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (params.auctionCommentId) {\n            axios\n                .get(\n                    `https://localhost:5000/auctionComments/${params.auctionCommentId}`\n                )\n                .then((res) => {\n                    if (res.status === 200) {\n                        setInit(res.data);\n                        setComment(res.data.comment);\n                        setOpinionType(res.data.type);\n                    } else {\n                        setAlertMessage(\"Błąd pobierania danych z serwera\");\n                        handleClick();\n                    }\n                });\n        }\n    }, []);\n\n    return (\n        <div className={\"login\"}>\n            <div className={\"form\"}>\n                {params.auctionCommentId ? (\n                    <h3>Edytuj komentarz</h3>\n                ) : (\n                    <h3>Dodaj komentarz</h3>\n                )}\n                <Box\n                    component=\"form\"\n                    sx={{\n                        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                    flexWrap={\"wrap\"}\n                >\n                    <Stack>\n                        <TextField\n                            id=\"outlined\"\n                            label=\"Komentarz\"\n                            name={\"comment\"}\n                            value={comment}\n                            onChange={(event) => setComment(event.target.value)}\n                        />\n                    </Stack>\n                    <Stack marginLeft={\"8px\"}>\n                        <FormControl>\n                            <InputLabel id=\"demo-simple-select-label\">\n                                Rodzaj komentarza\n                            </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                defaultValue={opinionType ? opinionType : true}\n                                label=\"Rodzaj komentarza\"\n                                onChange={(event) =>\n                                    setOpinionType(event.target.value)\n                                }\n                                style={{\n                                    maxWidth: \"225px\",\n                                    maxHeight: \"56px\",\n                                    minWidth: \"225px\",\n                                    minHeight: \"56px\",\n                                }}\n                            >\n                                <MenuItem value={true}>Pozytywny</MenuItem>\n                                <MenuItem value={false}>Negatywny</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </Stack>\n                    <Stack\n                        spacing={2}\n                        direction=\"row\"\n                        justifyContent={\"center\"}\n                        marginTop={\"10px\"}\n                    >\n                        <Button\n                            variant={\"text\"}\n                            type={\"button\"}\n                            onClick={() => history.goBack()}\n                        >\n                            Powrót\n                        </Button>\n                        {params.auctionCommentId ? (\n                            <Button\n                                variant={\"outlined\"}\n                                onClick={() => handleSubmit()}\n                            >\n                                Edytuj komentarz\n                            </Button>\n                        ) : (\n                            <Button\n                                variant={\"outlined\"}\n                                onClick={() => handleSubmit()}\n                            >\n                                Dodaj komentarz\n                            </Button>\n                        )}\n                    </Stack>\n                    <SnackbarComponent\n                        alertMessage={alertMessage}\n                        errorType={\"error\"}\n                        handleClose={handleClose}\n                        open={open}\n                    />\n                </Box>\n                <DialogComponent\n                    title={\n                        params.auctionCommentId\n                            ? \"Udało się edytowac komentarz\"\n                            : \"Udało się dodać komentarz\"\n                    }\n                    openDialog={openDialog}\n                    handleCloseDialog={handleCloseDialog}\n                    firstButtonAction={() => history.goBack()}\n                    firstButtonDesc={\"Powrót\"}\n                />\n            </div>\n            <Notification />\n        </div>\n    );\n};\n\nexport default AuctionCommentForm;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/AuctionForm.js",["160"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Button, Stack } from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport Notification from \"../Notification\";\nimport SnackbarComponent from \"../../SnackbarComponent\";\nimport DialogComponent from \"../../DialogComponent\";\n\nconst AuctionForm = () => {\n    const params = useParams();\n    const history = useHistory();\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [amount, setAmount] = useState(\"\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [openDialog, setOpenDialog] = useState(false);\n    const [open, setOpen] = useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n    const handleClickOpen = () => {\n        setOpenDialog(true);\n    };\n    const [init, setInit] = useState({\n        name: \"\",\n        description: \"\",\n        price: \"\",\n        amount: \"\",\n        user: params.id,\n    });\n\n    const handleSubmit = () => {\n        let errors = \"\";\n        if (title.length === 0) {\n            errors = errors + \"Nazwa jest wymagana. \";\n        } else if (title.length < 3) {\n            errors = errors + \"Nazwa musi mieć przynajmniej 3 znaki. \";\n        } else if (title.length > 50) {\n            errors = errors + \"Nazwa może mieć maksymalnie 50 znaków. \";\n        }\n        if (description.length === 0) {\n            errors = errors + \"Opis jest wymagany. \";\n        } else if (description.length > 500) {\n            errors = errors + \"Opis może mieć maksymalnie 500 znaków. \";\n        }\n        if (price === \"\") {\n            errors = errors + \"Cena jest wymagana. \";\n        } else if (isNaN(parseInt(price))) {\n            errors = errors + \"Cena musi być liczbą. \";\n        } else if (price < 0) {\n            errors = errors + \"Cena musi wynosić przynajmniej 0. \";\n        }\n        if (amount === \"\") {\n            errors = errors + \"Ilość jest wymagana. \";\n        } else if (isNaN(parseInt(amount))) {\n            errors = errors + \"Ilość musi być liczbą. \";\n        } else if (amount < 1) {\n            errors = errors + \"Ilość musi wynosić przynajmniej 1. \";\n        }\n        if (errors === \"\") {\n            const preparedData = {\n                ...init,\n                name: title,\n                description: description,\n                price: price,\n                amount: amount,\n            };\n            if (params.auctionId) {\n                axios\n                    .put(\n                        \"https://localhost:5000/auctions/editAuction\",\n                        preparedData\n                    )\n                    .then((res) => {\n                        if (res.status === 200) {\n                            handleClickOpen();\n                        } else {\n                            setAlertMessage(\"Nie udało się edytować aukcji\");\n                            handleClick();\n                        }\n                    });\n            } else {\n                axios\n                    .post(\n                        \"https://localhost:5000/auctions/addAuction\",\n                        preparedData\n                    )\n                    .then((res) => {\n                        if (res.status === 200) {\n                            handleClickOpen();\n                        } else {\n                            setAlertMessage(\"Nie udało się dodać aukcji\");\n                            handleClick();\n                        }\n                    });\n            }\n        } else {\n            setAlertMessage(errors);\n            handleClick();\n        }\n    };\n\n    useEffect(() => {\n        if (params.auctionId) {\n            axios\n                .get(`https://localhost:5000/auctions/${params.auctionId}`)\n                .then((res) => {\n                    if (res.status === 200) {\n                        setInit(res.data);\n                        setTitle(res.data.name);\n                        setAmount(res.data.amount);\n                        setPrice(res.data.price);\n                        setDescription(res.data.description);\n                    } else {\n                    }\n                });\n        }\n    }, []);\n\n    return (\n        <div className={\"login\"}>\n            <div className={\"form\"}>\n                {params.auctionId ? (\n                    <h3>Edytuj aukcje</h3>\n                ) : (\n                    <h3>Dodaj aukcje</h3>\n                )}\n                <Box\n                    component=\"form\"\n                    sx={{\n                        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                    flexWrap={\"wrap\"}\n                >\n                    <Stack>\n                        <TextField\n                            id=\"outlined\"\n                            label=\"Nazwa\"\n                            value={title}\n                            onChange={(event) => setTitle(event.target.value)}\n                        />\n                        <TextField\n                            id=\"outlined\"\n                            label=\"Opis\"\n                            value={description}\n                            onChange={(event) =>\n                                setDescription(event.target.value)\n                            }\n                        />\n                        <TextField\n                            id=\"outlined\"\n                            label=\"Cena\"\n                            value={price}\n                            onChange={(event) => setPrice(event.target.value)}\n                        />\n                        <TextField\n                            id=\"outlined\"\n                            label=\"Ilość\"\n                            value={amount}\n                            onChange={(event) => setAmount(event.target.value)}\n                        />\n                    </Stack>\n                    <Stack\n                        spacing={2}\n                        direction=\"row\"\n                        justifyContent={\"center\"}\n                        marginTop={\"10px\"}\n                    >\n                        <Button\n                            variant={\"text\"}\n                            onClick={() => history.goBack()}\n                        >\n                            Powrót\n                        </Button>\n                        {params.auctionId ? (\n                            <Button\n                                variant={\"outlined\"}\n                                onClick={() => handleSubmit()}\n                            >\n                                Edytuj aukcje\n                            </Button>\n                        ) : (\n                            <Button\n                                onClick={() => handleSubmit()}\n                                variant={\"outlined\"}\n                            >\n                                Dodaj aukcje\n                            </Button>\n                        )}\n                    </Stack>\n                    <SnackbarComponent\n                        alertMessage={alertMessage}\n                        errorType={\"error\"}\n                        handleClose={handleClose}\n                        open={open}\n                    />\n                </Box>\n                <DialogComponent\n                    title={\n                        params.auctionId\n                            ? \"Udało się edytowac aukcje\"\n                            : \"Udało się dodać aukcje\"\n                    }\n                    openDialog={openDialog}\n                    handleCloseDialog={handleCloseDialog}\n                    firstButtonAction={() => history.goBack()}\n                    firstButtonDesc={\"Powrót\"}\n                />\n            </div>\n            <Notification />\n        </div>\n    );\n};\n\nexport default AuctionForm;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/auctions/AuctionsManagement.js",["161"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport SearchBar from \"../../SearchBar\";\nimport NavbarLogged from \"../NavbarLogged\";\nimport { Button, Stack } from \"@mui/material\";\nimport { useConfirm } from \"material-ui-confirm\";\nimport Notification from \"../Notification\";\nimport SnackbarComponent from \"../../SnackbarComponent\";\n\nconst AuctionsManagement = () => {\n    const params = useParams();\n    const history = useHistory();\n    const confirm = useConfirm();\n    const [auctions, setAuctions] = useState([]);\n    const [open, setOpen] = React.useState(false);\n    const [errorType, setErrorType] = useState(\"info\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const getAllAuctions = () => {\n        axios.get(`https://localhost:5000/auctions`).then((res) => {\n            if (res.status === 200) {\n                setAuctions(res.data);\n            } else {\n                setAlertMessage(\"Błąd ładowania danych\");\n                setErrorType(\"error\");\n                handleClick();\n            }\n        });\n    };\n\n    useEffect(() => {\n        getAllAuctions();\n    }, []);\n\n    const handleDelete = (values) => {\n        confirm({\n            title: \"Czy na pewno chcesz usnunąć tą aukcje?\",\n            confirmationText: \"Usuń aukcje\",\n            cancellationText: \"Anuluj\",\n        })\n            .then(() => {\n                axios\n                    .delete(\n                        `https://localhost:5000/auctions/deleteAuction/${values}`\n                    )\n                    .then((res) => {\n                        if (res.status === 200) {\n                            setAlertMessage(\"Udało się usunąć aukcje\");\n                            setErrorType(\"success\");\n                            setAuctions(\n                                auctions.filter((n) => n._id !== values)\n                            );\n                            handleClick();\n                        } else {\n                            setAlertMessage(\"Nie udało się usunąć aukcji\");\n                            setErrorType(\"error\");\n                            handleClick();\n                        }\n                    });\n            })\n            .catch(() => {});\n    };\n\n    return (\n        <div className={\"auction-list\"}>\n            <h3>Zarządzanie aukcjami</h3>\n            <NavbarLogged />\n            <div className={\"buttons\"}>\n                <Stack\n                    direction={\"row\"}\n                    spacing={\"4px\"}\n                    justifyContent={\"center\"}\n                >\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() => getAllAuctions()}\n                    >\n                        Odśwież aukcje\n                    </Button>\n                    <Button\n                        variant={\"outlined\"}\n                        onClick={() => history.goBack()}\n                    >\n                        Powrót\n                    </Button>\n                </Stack>\n            </div>\n            <SearchBar\n                setAuctions={setAuctions}\n                cancelSearch={getAllAuctions}\n            />\n            <div className={\"items\"}>\n                {auctions.map((n) => (\n                    <div>\n                        <div\n                            key={n._id}\n                            onClick={() =>\n                                history.push(\n                                    `/logged/${params.id}/auction/${n._id}`\n                                )\n                            }\n                            className={\"details\"}\n                        >\n                            <p>Nazwa: {n.name}</p>\n                            <p>Cena: {n.price}</p>\n                            <p>Ilość: {n.amount}</p>\n                            <p>Opis: {n.description}</p>\n                        </div>\n                        <div className={\"buttons\"}>\n                            <Button\n                                variant={\"text\"}\n                                onClick={() =>\n                                    history.push(\n                                        `/logged/${params.id}/editAuction/${n._id}`\n                                    )\n                                }\n                            >\n                                Edytuj aukcje\n                            </Button>\n                            <Button\n                                variant={\"text\"}\n                                onClick={() => handleDelete(n._id)}\n                            >\n                                Usuń aukcję\n                            </Button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <SnackbarComponent\n                alertMessage={alertMessage}\n                errorType={errorType}\n                handleClose={handleClose}\n                open={open}\n            />\n\n            <Notification />\n        </div>\n    );\n};\n\nexport default AuctionsManagement;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/users/UserDetails.js",["162","163","164"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport * as mqtt from \"mqtt\";\nimport _ from \"lodash\";\nimport { Button } from \"@mui/material\";\nimport { useConfirm } from \"material-ui-confirm\";\nimport Notification from \"../Notification\";\nimport SnackbarComponent from \"../../SnackbarComponent\";\n\nconst UserDetails = () => {\n    const params = useParams();\n    const history = useHistory();\n    const [data, setData] = useState([]);\n    const [client, setClient] = useState(null);\n    const [dms, setDms] = useState([]);\n    const [like, setLike] = useState([]);\n    const [dislike, setDislike] = useState([]);\n    const [userCommentsLike, setUserCommentsLikes] = useState([]);\n    const [userCommentsDislike, setUserCommentsDislikes] = useState([]);\n    const [showComments, setShowComments] = useState(false);\n    const [tempLike, setTempLike] = useState(null);\n    const [tempDislike, setTempDislike] = useState(null);\n    const [errorType, setErrorType] = useState(\"info\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const confirm = useConfirm();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n    const getData = () => {\n        axios\n            .get(`https://localhost:5000/users/${params.userId}`)\n            .then((res) => {\n                if (res.status === 200) {\n                    setData(res.data);\n                    setUserCommentsLikes(\n                        res.data.comments.reduce((acc, curr) => {\n                            return [...acc, { id: curr._id, likes: [] }];\n                        }, [])\n                    );\n                    setUserCommentsDislikes(\n                        res.data.comments.reduce((acc, curr) => {\n                            return [...acc, { id: curr._id, dislikes: [] }];\n                        }, [])\n                    );\n                    for (let i = 0; i < res.data.comments.length; i++) {\n                        client.subscribe(res.data.comments[i]._id);\n                        client.publish(res.data.comments[i]._id, \"GL\");\n                    }\n                } else {\n                    setErrorType(\"error\");\n                    setAlertMessage(\"Błąd ładowania danych\");\n                    handleClick();\n                }\n            });\n    };\n    const mqttConnect = (host, mqttOption) => {\n        setClient(mqtt.connect(host, mqttOption));\n    };\n    useEffect(() => {\n        mqttConnect(\"mqtt://127.0.0.1:1884\", {\n            connectTimeout: 5000,\n            path: \"/mqtt\",\n        });\n    }, []);\n    useEffect(() => {\n        if (client) {\n            getData();\n            client.on(\"connect\", () => {\n                client.subscribe(\"DMChats\");\n                client.subscribe(params.userId);\n                client.publish(params.userId, \"GL\");\n                client.publish(\"DMChats\", \"getDM\");\n            });\n            client.on(\"error\", (err) => {\n                console.error(\"Connection error: \", err);\n                client.end();\n            });\n            client.on(\"message\", (topic, message) => {\n                const payload = { topic, message: message.toString() };\n                if (\n                    payload.topic === \"DMChats\" &&\n                    payload.message !== \"getDM\"\n                ) {\n                    if (\n                        dms !==\n                        payload.message.split(\"~\").filter((n) => n !== \"\")\n                    ) {\n                        setDms(\n                            payload.message.split(\"~\").filter((n) => n !== \"\")\n                        );\n                    }\n                } else if (\n                    payload.topic === params.userId &&\n                    payload.message[0] === \"L\"\n                ) {\n                    setLike([\n                        ...payload.message\n                            .slice(1)\n                            .split(\"~\")\n                            .filter((n) => n !== \"\"),\n                    ]);\n                } else if (\n                    payload.topic === params.userId &&\n                    payload.message[0] === \"D\"\n                ) {\n                    setDislike([\n                        ...payload.message\n                            .slice(1)\n                            .split(\"~\")\n                            .filter((n) => n !== \"\"),\n                    ]);\n                } else if (userCommentsLike && payload.message[0] === \"L\") {\n                    setTempLike(payload);\n                } else if (userCommentsDislike && payload.message[0] === \"D\") {\n                    setTempDislike(payload);\n                }\n            });\n        }\n    }, [client]);\n\n    useEffect(() => {\n        if (tempLike) {\n            if (userCommentsLike.find((n) => n.id === tempLike.topic)) {\n                setUserCommentsLikes([\n                    ...userCommentsLike.map((n) =>\n                        n.id === tempLike.topic\n                            ? {\n                                  id: tempLike.topic,\n                                  likes: [\n                                      ...tempLike.message\n                                          .slice(1)\n                                          .split(\"~\")\n                                          .filter((n) => n !== \"\"),\n                                  ],\n                              }\n                            : n\n                    ),\n                ]);\n            } else {\n                setUserCommentsLikes([\n                    ...userCommentsLike,\n                    {\n                        id: tempLike.topic,\n                        likes: [\n                            ...tempLike.message\n                                .slice(1)\n                                .split(\"~\")\n                                .filter((n) => n !== \"\"),\n                        ],\n                    },\n                ]);\n            }\n        }\n    }, [tempLike]);\n\n    useEffect(() => {\n        if (tempDislike) {\n            if (userCommentsDislike.find((n) => n.id === tempDislike.topic)) {\n                setUserCommentsDislikes([\n                    ...userCommentsDislike.map((n) =>\n                        n.id === tempDislike.topic\n                            ? {\n                                  id: tempDislike.topic,\n                                  dislikes: [\n                                      ...tempDislike.message\n                                          .slice(1)\n                                          .split(\"~\")\n                                          .filter((n) => n !== \"\"),\n                                  ],\n                              }\n                            : n\n                    ),\n                ]);\n            } else {\n                setUserCommentsDislikes([\n                    ...userCommentsDislike,\n                    {\n                        id: tempDislike.topic,\n                        dislikes: [\n                            ...tempDislike.message\n                                .slice(1)\n                                .split(\"~\")\n                                .filter((n) => n !== \"\"),\n                        ],\n                    },\n                ]);\n            }\n        }\n    }, [tempDislike]);\n\n    return (\n        <div className={\"auction-details\"}>\n            <h3>Profil użytkownika {data.login}</h3>\n            <div className={\"details\"}>\n                <p>\n                    Polecam: {like.length - 1}{\" \"}\n                    {params.id.toString() !== \"undefined\" &&\n                        params.id !== params.userId && (\n                            <Button\n                                onClick={() => {\n                                    dislike.includes(params.id)\n                                        ? setAlertMessage(\n                                              \"Możesz tylko polecić lub odradzić danego użytkownika\"\n                                          ) ||\n                                          setErrorType(\"warning\") ||\n                                          handleClick()\n                                        : like.includes(params.id)\n                                        ? client.publish(\n                                              params.userId,\n                                              `-L${params.id}`\n                                          )\n                                        : client.publish(\n                                              params.userId,\n                                              `+L${params.id}`\n                                          );\n                                }}\n                            >\n                                Poleć\n                            </Button>\n                        )}\n                </p>\n                <p>\n                    Nie polecam: {dislike.length - 1}{\" \"}\n                    {params.id.toString() !== \"undefined\" &&\n                        params.id !== params.userId && (\n                            <Button\n                                onClick={() => {\n                                    like.includes(params.id)\n                                        ? setAlertMessage(\n                                              \"Możesz tylko polecić lub odradzić danego użytkownika\"\n                                          ) ||\n                                          setErrorType(\"warning\") ||\n                                          handleClick()\n                                        : dislike.includes(params.id)\n                                        ? client.publish(\n                                              params.userId,\n                                              `-D${params.id}`\n                                          )\n                                        : client.publish(\n                                              params.userId,\n                                              `+D${params.id}`\n                                          );\n                                }}\n                            >\n                                Odradź\n                            </Button>\n                        )}\n                </p>\n                <p>\n                    Średnio{\" \"}\n                    {isNaN(\n                        Math.round(\n                            ((like.length - 1) /\n                                (like.length - 1 + dislike.length - 1)) *\n                                100 *\n                                100\n                        ) / 100\n                    )\n                        ? 0\n                        : Math.round(\n                              ((like.length - 1) /\n                                  (like.length - 1 + dislike.length - 1)) *\n                                  100 *\n                                  100\n                          ) / 100}\n                    % osób poleca tego użytkownika\n                </p>\n                {data.auctions && data.auctions.length > 0 && (\n                    <p>Aukcje tego użytkownika</p>\n                )}\n                {data.auctions && data.auctions.length > 0 && (\n                    <div className={\"user-auctions\"}>\n                        <div>\n                            {data.auctions.map((n) => (\n                                <div\n                                    id={n._id}\n                                    onClick={() =>\n                                        history.push(\n                                            `/logged/${params.id}/auction/${n._id}`\n                                        )\n                                    }\n                                >\n                                    <p>{n.name}</p>\n                                    <p>Cena: {n.price}</p>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n                {params.id.toString() !== \"undefined\" &&\n                params.id !== params.userId ? (\n                    <Button\n                        onClick={() =>\n                            history.push(\n                                `/logged/${params.id}/user/${params.userId}/addComment`\n                            )\n                        }\n                    >\n                        Dodaj komentarz\n                    </Button>\n                ) : null}\n                {data.comments &&\n                    data.comments.length > 0 &&\n                    (showComments ? (\n                        <Button onClick={() => setShowComments(false)}>\n                            Zwiń komentarze\n                        </Button>\n                    ) : (\n                        <Button onClick={() => setShowComments(true)}>\n                            Pokaż komentarze\n                        </Button>\n                    ))}\n                {params.id.toString() !== \"undefined\" &&\n                params.id !== params.userId ? (\n                    dms.includes(\n                        `${_.sortBy([params.id, params.userId])[0]}:${\n                            _.sortBy([params.id, params.userId])[1]\n                        }`\n                    ) ? (\n                        <Button\n                            onClick={() =>\n                                history.push(\n                                    `/logged/${params.id}/dmchat/${params.userId}`\n                                )\n                            }\n                        >\n                            Otwórz czat z użytkownkiem\n                        </Button>\n                    ) : (\n                        <Button\n                            onClick={() => {\n                                client.publish(\n                                    \"addDM\",\n                                    `${\n                                        _.sortBy([params.id, params.userId])[0]\n                                    }:${\n                                        _.sortBy([params.id, params.userId])[1]\n                                    }`\n                                );\n                                client.publish(\n                                    params.userId,\n                                    `newDM${params.id}`\n                                );\n                                history.push(\n                                    `/logged/${params.id}/dmchat/${params.userId}`\n                                );\n                            }}\n                        >\n                            Rozpocznij czat z tym użytkownikiem\n                        </Button>\n                    )\n                ) : null}\n                <Button onClick={() => history.goBack()}>Powrót</Button>\n                {data.comments && data.comments.length > 0\n                    ? showComments && (\n                          <div className={\"comments\"}>\n                              <div className={\"comments-list\"}>\n                                  {data.comments.map((n) => (\n                                      <div key={n._id}>\n                                          <div className={\"content\"}>\n                                              {n.type ? (\n                                                  <div>Komentarz pozytywny</div>\n                                              ) : (\n                                                  <div>Komentarz negatywny</div>\n                                              )}\n                                              <div>Treść: {n.comment}</div>\n                                          </div>\n                                          <div className={\"likes\"}>\n                                              {userCommentsLike &&\n                                                  userCommentsLike.length >\n                                                      0 && (\n                                                      <p>\n                                                          Lubię:{\" \"}\n                                                          {userCommentsLike.find(\n                                                              (k) =>\n                                                                  k.id === n._id\n                                                          ).likes.length -\n                                                              1}{\" \"}\n                                                      </p>\n                                                  )}\n                                              {userCommentsDislike &&\n                                                  userCommentsDislike.length >\n                                                      0 && (\n                                                      <p>\n                                                          Nie lubię:{\" \"}\n                                                          {userCommentsDislike.find(\n                                                              (k) =>\n                                                                  k.id === n._id\n                                                          ).dislikes.length -\n                                                              1}{\" \"}\n                                                      </p>\n                                                  )}\n                                              <Button\n                                                  onClick={() => {\n                                                      !params.id ||\n                                                      params.id.toString() ===\n                                                          \"undefined\"\n                                                          ? setAlertMessage(\n                                                                \"Musisz się zalogować, aby móc zaregować na dany komentarz\"\n                                                            ) ||\n                                                            setErrorType(\n                                                                \"warning\"\n                                                            ) ||\n                                                            handleClick()\n                                                          : userCommentsDislike\n                                                                .filter(\n                                                                    (k) =>\n                                                                        k.id ===\n                                                                        n._id\n                                                                )[0]\n                                                                .dislikes.includes(\n                                                                    params.id\n                                                                )\n                                                          ? setAlertMessage(\n                                                                \"Możesz tylko polubić lub nie polubić dany komentarz\"\n                                                            ) ||\n                                                            setErrorType(\n                                                                \"warning\"\n                                                            ) ||\n                                                            handleClick()\n                                                          : userCommentsLike\n                                                                .filter(\n                                                                    (k) =>\n                                                                        k.id ===\n                                                                        n._id\n                                                                )[0]\n                                                                .likes.includes(\n                                                                    params.id\n                                                                )\n                                                          ? client.publish(\n                                                                n._id,\n                                                                `-L${params.id}`\n                                                            )\n                                                          : client.publish(\n                                                                n._id,\n                                                                `+L${params.id}`\n                                                            );\n                                                  }}\n                                              >\n                                                  Polub\n                                              </Button>\n                                              <Button\n                                                  onClick={() => {\n                                                      !params.id ||\n                                                      params.id.toString() ===\n                                                          \"undefined\"\n                                                          ? setAlertMessage(\n                                                                \"Musisz się zalogować, aby móc zaregować na dany komentarz\"\n                                                            ) ||\n                                                            setErrorType(\n                                                                \"warning\"\n                                                            ) ||\n                                                            handleClick()\n                                                          : userCommentsLike\n                                                                .filter(\n                                                                    (k) =>\n                                                                        k.id ===\n                                                                        n._id\n                                                                )[0]\n                                                                .likes.includes(\n                                                                    params.id\n                                                                )\n                                                          ? setAlertMessage(\n                                                                \"Możesz tylko polubić lub nie polubić dany komentarz\"\n                                                            ) ||\n                                                            setErrorType(\n                                                                \"warning\"\n                                                            ) ||\n                                                            handleClick()\n                                                          : userCommentsDislike\n                                                                .filter(\n                                                                    (k) =>\n                                                                        k.id ===\n                                                                        n._id\n                                                                )[0]\n                                                                .dislikes.includes(\n                                                                    params.id\n                                                                )\n                                                          ? client.publish(\n                                                                n._id,\n                                                                `-D${params.id}`\n                                                            )\n                                                          : client.publish(\n                                                                n._id,\n                                                                `+D${params.id}`\n                                                            );\n                                                  }}\n                                              >\n                                                  Nie polub\n                                              </Button>\n                                          </div>\n                                          <div className={\"buttons\"}>\n                                              {n.author === params.id ||\n                                              params.id ===\n                                                  \"000000000000000000000000\" ? (\n                                                  <div>\n                                                      <Button\n                                                          onClick={() =>\n                                                              history.push(\n                                                                  `/logged/${params.id}/user/${params.userId}/editComment/${n._id}`\n                                                              )\n                                                          }\n                                                      >\n                                                          Edytuj komentarz\n                                                      </Button>\n                                                      <Button\n                                                          onClick={() =>\n                                                              confirm({\n                                                                  title: \"Czy na pewno chcesz usnunąć ten komentarz?\",\n                                                                  confirmationText:\n                                                                      \"Usuń komentarz\",\n                                                                  cancellationText:\n                                                                      \"Anuluj\",\n                                                              })\n                                                                  .then(() => {\n                                                                      axios\n                                                                          .delete(\n                                                                              `https://localhost:5000/userComments/deleteUserComment/${n._id}`\n                                                                          )\n                                                                          .then(\n                                                                              (\n                                                                                  res\n                                                                              ) => {\n                                                                                  if (\n                                                                                      res.status ===\n                                                                                      200\n                                                                                  ) {\n                                                                                      setErrorType(\n                                                                                          \"success\"\n                                                                                      );\n                                                                                      setAlertMessage(\n                                                                                          \"Udało się usunąć komentarz\"\n                                                                                      );\n                                                                                      handleClick();\n                                                                                      getData();\n                                                                                  } else {\n                                                                                      setErrorType(\n                                                                                          \"error\"\n                                                                                      );\n                                                                                      setAlertMessage(\n                                                                                          \"Nie udało się usnąć komentarza\"\n                                                                                      );\n                                                                                      handleClick();\n                                                                                  }\n                                                                              }\n                                                                          );\n                                                                  })\n                                                                  .catch(\n                                                                      () => {}\n                                                                  )\n                                                          }\n                                                      >\n                                                          Usuń komentarz\n                                                      </Button>\n                                                  </div>\n                                              ) : null}\n                                          </div>\n                                      </div>\n                                  ))}\n                              </div>\n                          </div>\n                      )\n                    : null}\n                <SnackbarComponent\n                    alertMessage={alertMessage}\n                    errorType={errorType}\n                    handleClose={handleClose}\n                    open={open}\n                />\n                <Notification />\n            </div>\n        </div>\n    );\n};\n\nexport default UserDetails;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/users/UserCommentForm.js",["165"],"import axios from \"axios\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogTitle,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    Stack,\n} from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport Notification from \"../Notification\";\nimport SnackbarComponent from \"../../SnackbarComponent\";\nimport DialogComponent from \"../../DialogComponent\";\n\nconst UserCommentForm = () => {\n    const params = useParams();\n    const history = useHistory();\n    const [comment, setComment] = useState(\"\");\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [openDialog, setOpenDialog] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [opinionType, setOpinionType] = useState(true);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n    const handleClickOpen = () => {\n        setOpenDialog(true);\n    };\n    const [init, setInit] = useState({\n        comment: \"\",\n        type: true,\n        author: params.id,\n        user: params.userId,\n    });\n\n    const handleSubmit = () => {\n        if (comment.length < 1) {\n            setAlertMessage(\"Komentarz musi zawierać jakąś treść.\");\n            handleClick();\n        } else if (comment.length > 200) {\n            setAlertMessage(\"Komentarz jest za długi. Maksymalnie 200 znaków.\");\n            handleClick();\n        } else if (opinionType === null) {\n            setAlertMessage(\"Wybierz rodzaj komentarza\");\n            handleClick();\n        } else {\n            const preparedData = {\n                ...init,\n                comment: comment,\n                type: opinionType,\n            };\n            if (params.userCommentId) {\n                axios\n                    .put(\n                        \"https://localhost:5000/userComments/editUserComment\",\n                        preparedData\n                    )\n                    .then((res) => {\n                        if (res.status === 200) {\n                            handleClickOpen();\n                        } else {\n                            setAlertMessage(\n                                \"Nie udało się edytować komentarza\"\n                            );\n                            handleClick();\n                        }\n                    });\n            } else {\n                axios\n                    .post(\n                        \"https://localhost:5000/userComments/addUserComment\",\n                        preparedData\n                    )\n                    .then((res) => {\n                        if (res.status === 200) {\n                            handleClickOpen();\n                        } else {\n                            setAlertMessage(\"Nie udało się dodać komentarza\");\n                            handleClick();\n                        }\n                    });\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (params.userCommentId) {\n            axios\n                .get(\n                    `https://localhost:5000/userComments/${params.userCommentId}`\n                )\n                .then((res) => {\n                    if (res.status === 200) {\n                        setInit(res.data);\n                        setComment(res.data.comment);\n                        setOpinionType(res.data.type);\n                    } else {\n                        setAlertMessage(\"Błąd pobierania danych z serwera\");\n                        handleClick();\n                    }\n                });\n        }\n    }, []);\n\n    return (\n        <div className={\"login\"}>\n            <div className={\"form\"}>\n                {params.userCommentId ? (\n                    <h3>Edytuj komentarz</h3>\n                ) : (\n                    <h3>Dodaj komentarz</h3>\n                )}\n                <Box\n                    component=\"form\"\n                    sx={{\n                        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                    flexWrap={\"wrap\"}\n                >\n                    <Stack>\n                        <TextField\n                            id=\"outlined\"\n                            label=\"Komentarz\"\n                            name={\"comment\"}\n                            value={comment}\n                            onChange={(event) => setComment(event.target.value)}\n                        />\n                    </Stack>\n                    <Stack marginLeft={\"8px\"}>\n                        <FormControl>\n                            <InputLabel id=\"demo-simple-select-label\">\n                                Rodzaj komentarza\n                            </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                defaultValue={opinionType ? opinionType : true}\n                                label=\"Rodzaj komentarza\"\n                                onChange={(event) =>\n                                    setOpinionType(event.target.value)\n                                }\n                                style={{\n                                    maxWidth: \"225px\",\n                                    maxHeight: \"56px\",\n                                    minWidth: \"225px\",\n                                    minHeight: \"56px\",\n                                }}\n                            >\n                                <MenuItem value={true}>Pozytywny</MenuItem>\n                                <MenuItem value={false}>Negatywny</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </Stack>\n                    <Stack\n                        spacing={2}\n                        direction=\"row\"\n                        justifyContent={\"center\"}\n                        marginTop={\"10px\"}\n                    >\n                        <Button\n                            variant={\"text\"}\n                            type={\"button\"}\n                            onClick={() => history.goBack()}\n                        >\n                            Powrót\n                        </Button>\n                        {params.userCommentId ? (\n                            <Button\n                                variant={\"outlined\"}\n                                onClick={() => handleSubmit()}\n                            >\n                                Edytuj komentarz\n                            </Button>\n                        ) : (\n                            <Button\n                                variant={\"outlined\"}\n                                onClick={() => handleSubmit()}\n                            >\n                                Dodaj komentarz\n                            </Button>\n                        )}\n                    </Stack>\n                    <SnackbarComponent\n                        alertMessage={alertMessage}\n                        errorType={\"error\"}\n                        handleClose={handleClose}\n                        open={open}\n                    />\n                </Box>\n                <Dialog\n                    position={\"absolute\"}\n                    open={openDialog}\n                    onClose={handleCloseDialog}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">\n                        {params.userCommentId\n                            ? \"Udało się edytowac komentarz\"\n                            : \"Udało się dodać komentarz\"}\n                    </DialogTitle>\n                    <DialogActions>\n                        <Button onClick={() => history.goBack()}>Powrót</Button>\n                    </DialogActions>\n                </Dialog>\n                <DialogComponent\n                    title={\n                        params.userCommentId\n                            ? \"Udało się edytowac komentarz\"\n                            : \"Udało się dodać komentarz\"\n                    }\n                    openDialog={openDialog}\n                    handleCloseDialog={handleCloseDialog}\n                    firstButtonAction={() => history.goBack()}\n                    firstButtonDesc={\"Powrót\"}\n                />\n            </div>\n            <Notification />\n        </div>\n    );\n};\n\nexport default UserCommentForm;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/Notification.js",["166"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport * as mqtt from \"mqtt\";\nimport { useParams } from \"react-router-dom\";\nimport SnackbarComponent from \"../SnackbarComponent\";\n\nconst Notification = () => {\n    const [open, setOpen] = useState(false);\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [client, setClient] = useState(null);\n    const params = useParams();\n\n    const mqttConnect = (host, mqttOption) => {\n        setClient(mqtt.connect(host, mqttOption));\n    };\n    useEffect(() => {\n        mqttConnect(\"mqtt://127.0.0.1:1884\", {\n            connectTimeout: 5000,\n            path: \"/mqtt\",\n        });\n    }, []);\n\n    useEffect(() => {\n        if (client) {\n            client.on(\"connect\", () => {\n                if (params.id !== undefined) {\n                    client.subscribe(params.id);\n                }\n            });\n            client.on(\"error\", (err) => {\n                console.error(\"Connection error: \", err);\n                client.end();\n            });\n            client.on(\"message\", (topic, message) => {\n                const payload = { topic, message: message.toString() };\n                if (payload.message.slice(0, 5) === \"newDM\") {\n                    axios\n                        .get(\n                            `https://localhost:5000/users/${payload.message.slice(\n                                5\n                            )}`\n                        )\n                        .then((res) => {\n                            if (res.status === 200) {\n                                setAlertMessage(\n                                    `Użytkownik ${res.data.login} rozpoczął czat z Tobą`\n                                );\n                                handleClick();\n                            }\n                        });\n                } else if (payload.message.slice(0, 5) === \"newMS\") {\n                    if (params.chatter !== payload.message.slice(5)) {\n                        axios\n                            .get(\n                                `https://localhost:5000/users/${payload.message.slice(\n                                    5\n                                )}`\n                            )\n                            .then((res) => {\n                                if (res.status === 200) {\n                                    setAlertMessage(\n                                        `Użytkownik ${res.data.login} wysłał Ci wiadomość prywatną`\n                                    );\n                                    handleClick();\n                                }\n                            });\n                    }\n                } else if (payload.message.slice(0, 5) === \"buyIT\") {\n                    axios\n                        .get(\n                            `https://localhost:5000/auctions/${payload.message.slice(\n                                5\n                            )}`\n                        )\n                        .then((res) => {\n                            if (res.status === 200) {\n                                setAlertMessage(\n                                    `Produkt ${res.data.name} został kupiony`\n                                );\n                                handleClick();\n                            }\n                        });\n                }\n            });\n        }\n    }, [client]);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <SnackbarComponent\n            alertMessage={alertMessage}\n            errorType={\"info\"}\n            handleClose={handleClose}\n            open={open}\n        />\n    );\n};\n\nexport default Notification;\n","/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/logged/NavbarLogged.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/DialogComponent.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/Navbar.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/SearchBar.js",[],"/home/mtx22/Pulpit/Rok 2 semestr 1/Protokoły sieci Web/Projekt_Protokoly_Sieci_Web/app/src/ui/SnackbarComponent.js",[],{"ruleId":"167","severity":1,"message":"168","line":45,"column":8,"nodeType":"169","endLine":45,"endColumn":16,"suggestions":"170"},{"ruleId":"167","severity":1,"message":"171","line":42,"column":8,"nodeType":"169","endLine":42,"endColumn":10,"suggestions":"172"},{"ruleId":"167","severity":1,"message":"173","line":103,"column":8,"nodeType":"169","endLine":103,"endColumn":16,"suggestions":"174"},{"ruleId":"167","severity":1,"message":"175","line":150,"column":8,"nodeType":"169","endLine":150,"endColumn":18,"suggestions":"176"},{"ruleId":"167","severity":1,"message":"177","line":187,"column":8,"nodeType":"169","endLine":187,"endColumn":21,"suggestions":"178"},{"ruleId":"167","severity":1,"message":"179","line":28,"column":8,"nodeType":"169","endLine":28,"endColumn":10,"suggestions":"180"},{"ruleId":"167","severity":1,"message":"181","line":83,"column":8,"nodeType":"169","endLine":83,"endColumn":16,"suggestions":"182"},{"ruleId":"167","severity":1,"message":"183","line":87,"column":8,"nodeType":"169","endLine":87,"endColumn":14,"suggestions":"184"},{"ruleId":"167","severity":1,"message":"168","line":76,"column":8,"nodeType":"169","endLine":76,"endColumn":16,"suggestions":"185"},{"ruleId":"167","severity":1,"message":"186","line":69,"column":8,"nodeType":"169","endLine":69,"endColumn":16,"suggestions":"187"},{"ruleId":"167","severity":1,"message":"188","line":56,"column":8,"nodeType":"169","endLine":56,"endColumn":10,"suggestions":"189"},{"ruleId":"167","severity":1,"message":"188","line":93,"column":8,"nodeType":"169","endLine":93,"endColumn":16,"suggestions":"190"},{"ruleId":"167","severity":1,"message":"183","line":97,"column":8,"nodeType":"169","endLine":97,"endColumn":14,"suggestions":"191"},{"ruleId":"167","severity":1,"message":"192","line":15,"column":8,"nodeType":"169","endLine":15,"endColumn":10,"suggestions":"193"},{"ruleId":"167","severity":1,"message":"194","line":130,"column":8,"nodeType":"169","endLine":130,"endColumn":10,"suggestions":"195"},{"ruleId":"167","severity":1,"message":"196","line":48,"column":8,"nodeType":"169","endLine":48,"endColumn":10,"suggestions":"197"},{"ruleId":"167","severity":1,"message":"198","line":118,"column":8,"nodeType":"169","endLine":118,"endColumn":10,"suggestions":"199"},{"ruleId":"167","severity":1,"message":"200","line":133,"column":8,"nodeType":"169","endLine":133,"endColumn":10,"suggestions":"201"},{"ruleId":"167","severity":1,"message":"171","line":46,"column":8,"nodeType":"169","endLine":46,"endColumn":10,"suggestions":"202"},{"ruleId":"167","severity":1,"message":"203","line":130,"column":8,"nodeType":"169","endLine":130,"endColumn":16,"suggestions":"204"},{"ruleId":"167","severity":1,"message":"205","line":165,"column":8,"nodeType":"169","endLine":165,"endColumn":18,"suggestions":"206"},{"ruleId":"167","severity":1,"message":"207","line":200,"column":8,"nodeType":"169","endLine":200,"endColumn":21,"suggestions":"208"},{"ruleId":"167","severity":1,"message":"209","line":121,"column":8,"nodeType":"169","endLine":121,"endColumn":10,"suggestions":"210"},{"ruleId":"167","severity":1,"message":"188","line":86,"column":8,"nodeType":"169","endLine":86,"endColumn":16,"suggestions":"211"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rooms'. Either include it or remove the dependency array.","ArrayExpression",["212"],"React Hook useEffect has a missing dependency: 'getAllAuctions'. Either include it or remove the dependency array.",["213"],"React Hook useEffect has missing dependencies: 'auctionCommentsDislike', 'auctionCommentsLike', 'getData', 'params.auctionId', and 'params.id'. Either include them or remove the dependency array.",["214"],"React Hook useEffect has a missing dependency: 'auctionCommentsLike'. Either include it or remove the dependency array. You can also do a functional update 'setauctionCommentsLikes(a => ...)' if you only need 'auctionCommentsLike' in the 'setauctionCommentsLikes' call.",["215"],"React Hook useEffect has a missing dependency: 'auctionCommentsDislike'. Either include it or remove the dependency array. You can also do a functional update 'setauctionCommentsDislikes(a => ...)' if you only need 'auctionCommentsDislike' in the 'setauctionCommentsDislikes' call.",["216"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["217"],"React Hook useEffect has missing dependencies: 'params.chat' and 'params.id'. Either include them or remove the dependency array.",["218"],"React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array. You can also do a functional update 'setMessages(m => ...)' if you only need 'messages' in the 'setMessages' call.",["219"],["220"],"React Hook useEffect has missing dependencies: 'dms' and 'params.id'. Either include them or remove the dependency array.",["221"],"React Hook useEffect has missing dependencies: 'params.chatter' and 'params.id'. Either include them or remove the dependency array.",["222"],["223"],["224"],"React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["225"],"React Hook useEffect has a missing dependency: 'params.userId'. Either include it or remove the dependency array.",["226"],"React Hook useEffect has a missing dependency: 'getMyAuctions'. Either include it or remove the dependency array.",["227"],"React Hook useEffect has a missing dependency: 'params.auctionCommentId'. Either include it or remove the dependency array.",["228"],"React Hook useEffect has a missing dependency: 'params.auctionId'. Either include it or remove the dependency array.",["229"],["230"],"React Hook useEffect has missing dependencies: 'dms', 'getData', 'params.userId', 'userCommentsDislike', and 'userCommentsLike'. Either include them or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'userCommentsLike'. Either include it or remove the dependency array. You can also do a functional update 'setUserCommentsLikes(u => ...)' if you only need 'userCommentsLike' in the 'setUserCommentsLikes' call.",["232"],"React Hook useEffect has a missing dependency: 'userCommentsDislike'. Either include it or remove the dependency array. You can also do a functional update 'setUserCommentsDislikes(u => ...)' if you only need 'userCommentsDislike' in the 'setUserCommentsDislikes' call.",["233"],"React Hook useEffect has a missing dependency: 'params.userCommentId'. Either include it or remove the dependency array.",["234"],["235"],{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"236","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"250","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"238","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"257","fix":"279"},"Update the dependencies array to be: [client, rooms]",{"range":"280","text":"281"},"Update the dependencies array to be: [getAllAuctions]",{"range":"282","text":"283"},"Update the dependencies array to be: [auctionCommentsDislike, auctionCommentsLike, client, getData, params.auctionId, params.id]",{"range":"284","text":"285"},"Update the dependencies array to be: [auctionCommentsLike, tempLike]",{"range":"286","text":"287"},"Update the dependencies array to be: [auctionCommentsDislike, tempDislike]",{"range":"288","text":"289"},"Update the dependencies array to be: [history]",{"range":"290","text":"291"},"Update the dependencies array to be: [client, params.chat, params.id]",{"range":"292","text":"293"},"Update the dependencies array to be: [messages, temp]",{"range":"294","text":"295"},{"range":"296","text":"281"},"Update the dependencies array to be: [client, dms, params.id]",{"range":"297","text":"298"},"Update the dependencies array to be: [params.chatter, params.id]",{"range":"299","text":"300"},"Update the dependencies array to be: [client, params.chatter, params.id]",{"range":"301","text":"302"},{"range":"303","text":"295"},"Update the dependencies array to be: [params.id]",{"range":"304","text":"305"},"Update the dependencies array to be: [params.userId]",{"range":"306","text":"307"},"Update the dependencies array to be: [getMyAuctions]",{"range":"308","text":"309"},"Update the dependencies array to be: [params.auctionCommentId]",{"range":"310","text":"311"},"Update the dependencies array to be: [params.auctionId]",{"range":"312","text":"313"},{"range":"314","text":"283"},"Update the dependencies array to be: [client, dms, getData, params.userId, userCommentsDislike, userCommentsLike]",{"range":"315","text":"316"},"Update the dependencies array to be: [tempLike, userCommentsLike]",{"range":"317","text":"318"},"Update the dependencies array to be: [tempDislike, userCommentsDislike]",{"range":"319","text":"320"},"Update the dependencies array to be: [params.userCommentId]",{"range":"321","text":"322"},{"range":"323","text":"302"},[1644,1652],"[client, rooms]",[1108,1110],"[getAllAuctions]",[4316,4324],"[auctionCommentsDislike, auctionCommentsLike, client, getData, params.auctionId, params.id]",[5829,5839],"[auctionCommentsLike, tempLike]",[7185,7198],"[auctionCommentsDislike, tempDislike]",[928,930],"[history]",[2948,2956],"[client, params.chat, params.id]",[3031,3037],"[messages, temp]",[2603,2611],[2519,2527],"[client, dms, params.id]",[1783,1785],"[params.chatter, params.id]",[3273,3281],"[client, params.chatter, params.id]",[3356,3362],[464,466],"[params.id]",[4133,4135],"[params.userId]",[1467,1469],"[getMyAuctions]",[3835,3837],"[params.auctionCommentId]",[4584,4586],"[params.auctionId]",[1400,1402],[4921,4929],"[client, dms, getData, params.userId, userCommentsDislike, userCommentsLike]",[6188,6198],"[tempLike, userCommentsLike]",[7499,7512],"[tempDislike, userCommentsDislike]",[3850,3852],"[params.userCommentId]",[3386,3394]]